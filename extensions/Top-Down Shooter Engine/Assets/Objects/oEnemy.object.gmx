<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemyIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement speed
h = 0;
v = 0;

// Movement Vars //////////////////////////////////////////////////////////////

// Adjust THIS to adjust overall player speed
m = 1;

// Acceleration + friction
accel = 0.8  * m;
fric  = 0.4  * m;

// Max movement speeds
maxSpd = 3.0 * m;

///////////////////////////////////////////////////////////////////////////////

// State Info /////////////////////////////////////////////////////////////////

facing = choose(1, -1);

// For squash + stretch
xscale = 1;
yscale = 1;

///////////////////////////////////////////////////////////////////////////////

// Misc
moveDir  = 0;
moveTime = 0;
gunAng   = random(360);
alarm[0] = random_range(30, 120);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reset alarm
alarm[0] = random_range(20, 40);

// Search for player
if (instance_exists(oPlayer)) {
    if (!collision_line(x, y, oPlayer.x, oPlayer.y, oParSolid, false, false)) {
        if (point_distance(x, y, oPlayer.x, oPlayer.y) &gt;= 32) {
            if (random_range(10, 30) &gt; 15) {
                // Bullet creation + aim at mouse
                with (instance_create(x + lengthdir_x(10, gunAng), y + 4 + lengthdir_y(10, gunAng), oEnemyBullet)) 
                    direction = other.gunAng + random_range(-4, 4);
        
            // Aim at player + reset
            gunAng = point_direction(x, y, oPlayer.x, oPlayer.y);
            alarm[0] = random_range(15, 20);
        } else {
            // Move away ish from player
            moveDir = point_direction(x, y, oPlayer.x, oPlayer.y) + random_range(90, 180);
            
            // Set speed from direction
            h = lengthdir_x(accel, moveDir);
            v = lengthdir_y(accel, moveDir);
        
            // How far he will move
            moveTime = random_range(10, 20);
            gunAng   = point_direction(x, y, oPlayer.x, oPlayer.y);
        }
    } else {
        // Move towards ish the player
        moveDir = point_direction(x, y, oPlayer.x, oPlayer.y) + random_range(-10, 10);

        // Set speed from direction
        h = lengthdir_x(accel, moveDir);
        v = lengthdir_y(accel, moveDir);
        
        moveTime = random_range(40, 60);
        gunAng   = point_direction(x, y, oPlayer.x, oPlayer.y);
    }

    if (oPlayer.x &gt;= x)
        facing = 1;
    else
        facing = -1;
        
    } else if (random_range(10, 30) &gt; 20) {
        // Move random
        moveDir = random(360);

        // Set speed from direction
        h += lengthdir_x(accel, moveDir);
        v += lengthdir_y(accel, moveDir);
        
        // Set move time + reset
        moveTime = random_range(10, 30);
        alarm[0] = moveTime + random_range(10, 40);

        // Face direction traveling
        if (sign(h) &gt;= 0)
            facing = sign(h);
                    
        // Point gun in direction traveling
        gunAng = moveDir;

    }
} else if (random(100) &gt; 85) {
    // Move randomly if NO player
    moveDir = random(360);
    h += lengthdir_x(accel, moveDir);
    v += lengthdir_y(accel, moveDir);
    moveTime = random_range(10, 30);
    alarm[0] = moveTime + random_range(10, 40);
    gunAng = moveDir;
    
    if (sign(h) &gt;= 0)
        facing = sign(h);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Actual collision checks + movement
var i;

// Vertical
for (i = 0; i &lt; abs(v); ++i) {
    // UP slope
    if (place_meeting(x, y + sign(v), oParSolid) &amp;&amp; !place_meeting(x - 1, y + sign(v), oParSolid))
        --x;
    
    if (place_meeting(x, y + sign(v), oParSolid) &amp;&amp; !place_meeting(x + 1, y + sign(v), oParSolid))
        ++x;

    if (!place_meeting(x, y + sign(v), oParSolid))
        y += sign(v);
    else {
        v = 0;
        break;
    }
}

// Horizontal
for (i = 0; i &lt; abs(h); ++i) { 
    // Slopes
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid))
        ++y;
         
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 
    else {
        h = 0;
        break;
    }
}

///////////////////////////////////////////////////////////////////////////////

// Stay away from walls
if (place_meeting(x + 1, y, oParSolid)) {
    moveTime = random_range(3, 9);
    moveDir  = 180 + random_range(-45, 45);
}

if (place_meeting(x - 1, y, oParSolid)) {
    moveTime = random_range(3, 9);
    moveDir  = 0 + random_range(-45, 45);
}

if (place_meeting(x, y - 1, oParSolid)) {
    moveTime = random_range(3, 9);
    moveDir  = 270 + random_range(-45, 45);
}

if (place_meeting(x, y + 1, oParSolid)) {
    moveTime = random_range(3, 9);
    moveDir  = 90 + random_range(-45, 45);
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Walk
if (--moveTime &gt; 0) {
    h += lengthdir_x(accel * 2, moveDir);
    v += lengthdir_y(accel * 2, moveDir);
}

// Limit movemetn speed
h = clamp(h, -maxSpd, maxSpd);
v = clamp(v, -maxSpd, maxSpd);

// Friction
h = Approach(h, 0, fric);
v = Approach(v, 0, fric);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGunPickup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.speed &gt; 4) {
    var i;
    
    for (i = 0; i &lt; 8; ++i)
        instance_create(x, y, oEnemyBlood);
        
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Move away from other enemies
h += lengthdir_x(accel, point_direction(other.x, other.y, x, y) + random_range(-10, 10));
v += lengthdir_y(accel, point_direction(other.x, other.y, x, y) + random_range(-10, 10));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for (i = 0; i &lt; 8; ++i)
    instance_create(x, y, oEnemyBlood);
    
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw sprite depending on player state
if (h == 0 &amp;&amp; v == 0) {
    image_speed = 0.1;
    sprite_index = sEnemyIdle;
} else {
    image_speed = 0.5; 
    sprite_index = sEnemyRun;
}

// Draw enemy
draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
// Draw gun
draw_sprite_ext(sEnemyGun, -1, x + lengthdir_x(4, gunAng), y + 4 + lengthdir_y(4, gunAng), xscale, facing, gunAng, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
