<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement speed
h = 0;
v = 0;

// Camera (later versions) ////////////////////////////////////////////////////
if (!instance_exists(oCamera))
    instance_create(x, y, oCamera);
    
// Initial camera position  
view_xview[0] = max(0, min(x - view_wport[0] * 0.5, room_width  - view_wport[0]));
view_yview[0] = max(0, min(y - view_hport[0] * 0.5 - 16, room_height - view_hport[0]));

// Movement Vars //////////////////////////////////////////////////////////////

// Adjust THIS to adjust overall player speed
m = 1;

// Acceleration + friction
accel = 1.0  * m;
fric  = 2.0  * m;

// Max movement speeds
maxSpd = 6.5 * m;

///////////////////////////////////////////////////////////////////////////////

// State Info /////////////////////////////////////////////////////////////////
// States
IDLE     = 10;
RUN      = 11;

// Initialize properties
state  = IDLE;

if (mouse_x &gt; x)
    facing = 1;
else
    facing = -1;

// For squash + stretch
xscale = 1;
yscale = 1;

canShoot = true;

// Current gun
gun = 0; // pistol, machine, shot (-1 -&gt; NONE)

///////////////////////////////////////////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trail</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>length = 6; //4;
w1 = 3;
w2 = 5; //0;
c1 = c_white
c2 = c_white
a1 = 1;
a2 = 1;
xscatter = 0//6;
yscatter = 1;
xdrift = 0;
ydrift = 5;
trail = TrailCreate(length, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Actual collision checks + movement
var i;

// Vertical
for (i = 0; i &lt; abs(v); ++i) {
    // UP slope
    if (place_meeting(x, y + sign(v), oParSolid) &amp;&amp; !place_meeting(x - 1, y + sign(v), oParSolid))
        --x;
    
    if (place_meeting(x, y + sign(v), oParSolid) &amp;&amp; !place_meeting(x + 1, y + sign(v), oParSolid))
        ++x;

    if (!place_meeting(x, y + sign(v), oParSolid))
        y += sign(v);
    else {
        v = 0;
        break;
    }
}

// Horizontal
for (i = 0; i &lt; abs(h); ++i) { 
    // Slopes
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid))
        ++y;
         
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 
    else {
        h = 0;
        break;
    }
}

///////////////////////////////////////////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trail</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update particle trail
ydrift = -sign(v);
xdrift = -sign(h);

if (state == IDLE) {
    ydrift = random_range(-2, 2);
    xdrift = -5 * facing;
}

TrailUpdate(trail, x, y);
TrailDrift(trail, xdrift, ydrift);
TrailScatter(trail, xscatter, yscatter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Declare Temp Variables /////////////////////////////////////////////////////
var kLeft, kRight, kUp, kDown, tempAccel, tempFric;
///////////////////////////////////////////////////////////////////////////////

// Input //////////////////////////////////////////////////////////////////////

kLeft        = keyboard_check(ord('A'));
kRight       = keyboard_check(ord('D'));
kUp          = keyboard_check(ord('W'));
kDown        = keyboard_check(ord('S'));

///////////////////////////////////////////////////////////////////////////////

// Left 
if (kLeft &amp;&amp; !kRight) {
    if (h &gt; 0)
        h = Approach(h, 0, fric);   
    h = Approach(h, -maxSpd, accel);
        
    state = RUN;
}

// Right
if (kRight &amp;&amp; !kLeft) {
    if (h &lt; 0)
        h = Approach(h, 0, fric);   
    h = Approach(h, maxSpd, accel);
        
    state = RUN;
}

// Up
if (kUp &amp;&amp; !kDown) {
    if (v &gt; 0)
        v = Approach(v, 0, fric);   
    v = Approach(v, -maxSpd, accel);
        
    state = RUN;
}

// Down
if (kDown &amp;&amp; !kUp) {
    if (v &lt; 0)
        v = Approach(v, 0, fric);   
    v = Approach(v, maxSpd, accel);
        
    state = RUN;
}

// Friction
if (!kRight &amp;&amp; !kLeft)
    h = Approach(h, 0, fric);
if (!kDown &amp;&amp; !kUp)
    v = Approach(v, 0, fric);

// Standing
if (!kRight &amp;&amp; !kLeft &amp;&amp; !kDown &amp;&amp; !kUp)
    state = IDLE;
    
// Face mouse position
if (mouse_x &gt;= x)
    facing = 1;
else
    facing = -1; 

// Shoot //////////////////////////////////////////////////////////////////////
if (gun != -1) {
    if (canShoot) {
        if (mouse_check_button(mb_left)) {
            // Bullet creation + aim at mouse
            with (instance_create(x + lengthdir_x(8, point_direction(x, y, mouse_x, mouse_y)), y + 4 + lengthdir_y(8, point_direction(x, y, mouse_x, mouse_y)), oBullet))
                direction = point_direction(other.x, other.y, mouse_x, mouse_y) + random_range(-2, 2);    
            
            // Extra shotgun bullets
            if (gun == 2) {
                var i;
                for (i = 0; i &lt; 4; ++i)
                    with (instance_create(x + lengthdir_x(8, point_direction(x, y, mouse_x, mouse_y)), y + 4 + lengthdir_y(8, point_direction(x, y, mouse_x, mouse_y)), oBullet))
                        direction = point_direction(other.x, other.y, mouse_x, mouse_y) + random_range(-15, 15);  
            };    
                
            // Distort player sprite
            if (choose(0, 1)) {
                xscale = 1.3;
                yscale = 0.7;
            } else {
                yscale = 1.3;
                xscale = 0.7;        
            }
            
            // Delay fire
            switch(gun) {
                case 0:
                    alarm[0] = 10;
                break;
                case 1:
                    alarm[0] = 3;
                break;
                case 2:
                    alarm[0] = 20;
                break;
            }
            
            canShoot = false;
        }
    } 
}

if (mouse_check_button_pressed(mb_right)) {
    if (gun == -1) {
        with (instance_place(x, y, oGunPickup)) {
            other.gun = image_index;
            instance_destroy();
        }
    } else {
        var oldGun = gun;
        
        // Pickup new gun
        if (instance_place(x, y, oGunPickup)) {
            with (instance_place(x, y, oGunPickup)) {
                other.gun = image_index;
                instance_destroy();
            }
        } else {
            // no gun
            gun = -1;
        }  
        
        // Throw old gun
        with (instance_create(x, y, oGunPickup)) {
            image_index = oldGun;
            direction   = point_direction(other.x, other.y, mouse_x, mouse_y);
            speed       = 14;
        }  
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Squash + Stretch</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Adjust scaling after squash + stretch
xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemyBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for (i = 0; i &lt; 8; ++i)
    instance_create(x, y, oBlood);
    
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for (i = 0; i &lt; 8; ++i)
    instance_create(x, y, oBlood);
    
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;

for (i = 0; i &lt; 32; ++i) 
    instance_create(xprevious + random_range(-12, 12), yprevious + random_range(-12, 12), oBlood);
    
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw sprite depending on player state
switch (state) {
    case IDLE: 
        image_speed = 0.1;
        sprite_index = sPlayerIdle;
    break;
    
    case RUN: 
        image_speed = 0.5; 
        sprite_index = sPlayerRun;
    break;
}

// Line to mouse
draw_set_alpha(0.25);
draw_line_width(x, y, mouse_x, mouse_y, 4);
draw_set_alpha(1);

// Draw particle trail
TrailDraw(trail,w1,w2,c1,c2,image_alpha, image_alpha);

// Draw player
draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);

// Draw gun
if (gun != -1)
    draw_sprite_ext(sGun, gun, x + lengthdir_x(4, point_direction(x, y, mouse_x, mouse_y)), y + 4 + lengthdir_y(4, point_direction(x, y, mouse_x, mouse_y)), xscale, facing, point_direction(x, y, mouse_x, mouse_y), c_white, 1);

// Draw cursor
draw_sprite_ext(sCursor, -1, mouse_x, mouse_y, 1, 1, point_direction(x, y, mouse_x, mouse_y) + 45, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
