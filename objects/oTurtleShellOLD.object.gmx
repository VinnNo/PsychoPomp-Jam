<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTurtleSpin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sTurtleMaskSpin</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contactDamage = 1;

hpMax = 99
hp = hpMax;

coolDownTimer = 0;
coolDownTimerMax = 200;
warnOne = 60;
warnTwo = 120;

h = 0;
spd = 2.5;

xPrev = 0;
yPrev = 0;

dir = choose(1, -1);
xscale = 1;
yscale = 1;
playerAbove = false;

idle = "idle";
walking = "walking";
standUp = "standUp";
state = idle;
nState = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
//if ( place_meeting(x, y, oParSolid) )
//{
//    x = xPrev;
//    y = yPrev;
//}

for (i = 0; i &lt; abs(h); ++i) {
    // UP slope
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(h), y + 2, oParSolid))
        ++y;      
        
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.1);
yscale = Approach(yscale, 1, 0.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if ( !place_meeting(x, y, oParSolid) )
//{
//    xPrev = x;
//    yPrev = y;
//}

if ( instance_exists(oPlayer) )
{
    if ( oPlayer.vy != 0 )
    {
        contactDamage = 0;
    }
    else
    {
        contactDamage = 1;
    }
}

if ( state == idle )
{
    coolDownTimer += 1;
    if ( coolDownTimer == warnOne
    || coolDownTimer == warnTwo )
    {
        xscale = 1.5;
        yscale = 0.75;
    }
    
    if ( coolDownTimer == coolDownTimerMax )
    {
        state = standUp;
        coolDownTimer = 0;
        nState = true;
    }
}

var playerAbovePrev = playerAbove;
playerAbove         = place_meeting(x, y - 1, oPlayer);

// If it's the first frame of player contact
if (playerAbove &amp;&amp; !playerAbovePrev) 
{
    xscale = 0.5;
    yscale = 1.5;
    if ( state == walking )
    {
        state = idle;
        nState = true;
    }
    else if ( state == idle )
    {
        state = walking;
        nState = true;
    }
    with (oPlayer)
    {
        vy = -jumpHeight;
    }
}

if ( place_meeting(x + dir, y, oParSolid) )
{
    xscale = 0.5;
    yscale = 1.5;
    dir = -dir;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( frozen == false )
{
    if ( state == idle )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleSpin;
            image_speed = 0;
            coolDownTimer = 0;
            h = 0;
            nState = false;
        }
        image_speed = 0;
    }
    else if ( state == standUp )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleStand;
            image_index = 0;
            h = 0;
            nState = false;
        }
        image_speed = 0.15;
    }
    else if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleSpin;
            image_speed = 0.15;
            nState = true;
        }
        /*
        if ( place_meeting( x + dir, y, oParSolid) )
        {
            dir = -dir;
        }
        h += spd*dir;
        if ( h != 0 )
        {
            if ( h &gt; 0 )
            {
                if ( h &gt; spd )
                {
                    h = spd;
                }
            }
            else if ( h &lt; 0 )
            {
                if ( h &lt; -spd )
                {
                    h = -spd;
                }
            }
        }
        */
        enemyWalk(spd, dir, h);
        image_speed = 0.15;
    }
}
else
{
    image_speed = 0;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sTurtleStand )
{
    instance_create(x /*- 4*image_xscale*/, y, oTurtle);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, image_xscale * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
