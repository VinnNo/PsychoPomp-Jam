<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSorcererIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff
canMove = true;

//Attack Stuff
contactDamage = 1;
contactDamageRegular = 1;
attackcontactDamage = 1;

hpMax = 4;
hp = hpMax;

//Movements
h = 0;
v = 0;

move = 0.15;
movePlus = 0.45;
moveRegular = 0.15;

groundAccel = 1.0  * move;
groundFric  = 2.0  * move;
airAccel    = 0.75 * move;
airFric     = 0.10 * move;

// Max movement speeds
maxH        = 5.5  * move;
maxV        = 9.0  * move;

deathSeq = sSkeletonDie;
oName="Muncher";

//Facings
RIGHT = 1;
LEFT = -1;

//facing = image_xscale;

//States
idle = "idle";
walking = "walking";
hitshock = "hitshock";
attacking = "attacking"
conjure = "conjure";
state = idle;

nState = false;
animStateSwitch = false;

cooldownTimer = 0;

//Spotting the player
foundHim = false;
foundHimTimer = 0;
foundHimTime = 30;
hSight = 6*16;
vSight = 4*16;
closeQuarters = 3*16;
isClose = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
var ID;
ID = instance_create(xprevious,yprevious,oEnemyDeath);
ID.oName = "Muncher";
ID.image_xscale=image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
if (hp &lt;= 0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
// Actual collision checks + movement
if (frozen == false){
var i;

// Vertical
for (i = 0; i &lt; abs(v); ++i) {
    if (!place_meeting(x, y + sign(v), oParSolid))
        y += sign(v);
    else {
        v = 0;
        break;
    }
}

// Horizontal
for (i = 0; i &lt; abs(h); ++i) {
    // UP slope
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(h), y + 2, oParSolid))
        ++y;      
        
    if (!place_meeting(x + sign(h), y, oParSolid)&amp;&amp; !place_meeting(x + sign(h), y, oEnBlocker))
        x += sign(h); 
    else {
            h = 0;
        break;
    }
}
}
///////////////////////////////////////////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if (goodtoGo &amp;&amp; frozen == false)
{  
    if ( state == idle )
    {
        if ( nState == true )
        {
            cooldownTimer = 0;
            sprite_index = sSorcererIdle;
            image_index = 0;
            nState = false;
            h = 0;
        }
        
        sightRadius();
        if ( foundHim == true )
        {
            sightCloseQuarters();
            if ( isClose == false )
            {
                state = walking;
                nState = true;
            }
            else
            {
                state = conjure;
                nState = true;
            }
        }
        else
        {
            cooldownTimer += 1;
            
            if (cooldownTimer == 100 )
            {
                cooldownTimer = 0;
                //state = choose( idle, walking);
                state = walking;
                nState = true;
            }
        }
        sprite_index = sSorcererIdle;
        image_speed = 0.1;
    }
    else if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sSorcererWalk;
            image_index = 0;
            h = 0;
            sightCloseQuarters();
            if ( isClose == true )
            {
                move = movePlus;
            }
            else
            {
                move = moveRegular;
            }
                nState = false;
        }
        
        sightRadius();
        if ( foundHim == true )
        {  
            
            foundHimTimer += 1;
            
            if ( foundHimTimer == foundHimTime )
            {
                sightRadius();
                if ( foundHim == false )
                {
                    foundHimTimer = 0;
                    state = choose(idle, walking);
                    nState = true;
                }
                else
                {
                    if (random(100)&gt;75)
                    {
                        state = conjure;
                        nState = true;
                    }
                    else
                    {
                        sightCloseQuarters();
                        if ( isClose == true )
                        {
                            if (oPlayer.x &gt; x)
                            {
                                image_xscale = LEFT;
                            }
                            else
                            {
                                image_xscale = RIGHT;
                            }
                        }
                        else
                        {
                            if (oPlayer.x &gt; x)
                            {
                                image_xscale = RIGHT;
                            }
                            else
                            {
                                image_xscale = LEFT;
                            }
                        }
                    }
                    founHimTimer = 0;
                }
            }
            
            if (!place_meeting( x*image_xscale+3, y-3, oParSolid)
            &amp;&amp; !place_meeting( x*image_xscale+3, y, oEnBlocker) )
            {
                h = image_xscale * move;
            }
            else
            {
                h = 0;
            }
    
            if (h == 0)
            {
                if (place_meeting(x+1,y-3,oParSolid) &amp;&amp; place_meeting(x-1,y-3,oParSolid))
                {
                    if (random(100) &gt; 50)
                    {
                        state = conjure;
                        nState = true;
                    }else{
                    image_xscale = -image_xscale;
                    state = idle;
                        nState = true;}
                }
                else
                {
                    state = conjure;
                    nState = true;
                }
            }
        }
        else
        {
            foundHimTimer += 1;
            
            if ( foundHimTimer == foundHimTime )
            {
                sightRadius();
                if ( foundHim == false )
                {
                    foundHimTimer = 0;
                    state = choose(idle, walking);
                    nState = true;
                }
                else
                {
                    if (random(100)&gt;75)
                    {
                        state = conjure;
                        nState = true;
                    }
                    else
                    {
                        sightCloseQuarters();
                        if ( isClose == true )
                        {
                            if (oPlayer.x &gt; x)
                            {
                                image_xscale = LEFT;
                            }
                            else
                            {
                                image_xscale = RIGHT;
                            }
                        }
                        else
                        {
                            if (oPlayer.x &gt; x)
                            {
                                image_xscale = RIGHT;
                            }
                            else
                            {
                                image_xscale = LEFT;
                            }
                        }
                    }
                    founHimTimer = 0;
                }
            }
        
            if (!place_meeting( x*image_xscale+3, y-3, oParSolid)
            &amp;&amp; !place_meeting( x*image_xscale+3, y-3, oEnBlocker) )
            {
                h = image_xscale * move;
            }
            else
            {
                h = 0;
            }
    
            if (h == 0)
            {
                if (place_meeting(x+1,y-3,oParSolid) &amp;&amp; place_meeting(x-1,y-3,oEnBlocker))
                {
                    state = idle;
                    nState = true;
                }
                else
                {
                    image_xscale = -image_xscale;
                    state = idle;
                    nState = true;
                }
            }
        }
        sprite_index = sSorcererWalk;
        if ( move == movePlus )
        {
            image_speed = 0.4;
        }
        else
        {
            image_speed = 0.25;
        }
    }
    else if ( state == attacking )
    {
        if ( nState == true )
        {
            sprite_index = sSorcererCast;
            image_index = 0;
            var conjureID;
            {
                conjureID = instance_create(x-3*image_xscale, y, oSorcShot)
                conjureID.image_xscale = image_xscale;
            }
            nState = false;
            h = 0;
        }
        sprite_index = sSorcererCast;
        image_speed = 0.1;
    }   
    else if ( state == hitshock )
    {
        if ( nState == true )
        {
            sprite_index = sSorcererHit;
            image_index = 0;
            nState = false;
            h = 0;
            contactDamage = 0;
        }
        sprite_index = sSorcererHit;
        image_speed = 0.75;
    }
    else if ( state == conjure )
    {
        if ( nState == true )
        {
            sprite_index = sSorcererConjure;
            image_index = 0;
            if (oPlayer.x &gt; x)
            {
                image_xscale = RIGHT;
            }
            else
            {
                image_xscale = LEFT;
            }
            h=0;
            nState = false;
        }
        sprite_index = sSorcererConjure;
        image_speed = 0.1;
    }
}
else
{
    image_speed=0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Junk
/*
if (!place_meeting( x+image_xscale, y-3, oParSolid)
    &amp;&amp; !place_meeting( x+image_xscale, y-3, oEnBlocker) )
    {
        h = image_xscale * 0.05;
        x += h;
    }
    else
    {
        h = 0;
    }
    
               
        if (h == 0)
        {
            if (place_meeting(x+1,y,oParSolid) &amp;&amp; place_meeting(x-1,y,oParSolid))
            {
                image_index=1;
                image_speed=0;
            }
            else
            {
                image_xscale = -image_xscale;
            }
        }
        
        
        
        
        
        
        
        
        
        
       
        
       else if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sSorcererWalk;
            image_index = 0;
            h = 0;
            sightCloseQuarters();
            if ( isClose == true )
            {
                move = movePlus;
            }
            else
            {
                move = moveRegular;
            }
                nState = false;
        }
        
        sightRadius();
        if ( foundHim == true )
        {  
        /*
            sightCloseQuarters();
            if ( isClose == true )
            {
                if (oPlayer.x &gt; x)
                {
                    image_xscale = RIGHT;
                }
                else
                {
                    image_xscale = LEFT;
                }
            }
            else
            {
                if (oPlayer.x &gt; x)
                {
                    image_xscale = LEFT;
                }
                else
                {
                    image_xscale = RIGHT;
                }
            }
            
            foundHimTimer += 1;
            
            if ( foundHimTimer == foundHimTime )
            {
                sightRadius();
                if ( foundHim == false )
                {
                    foundHimTimer = 0;
                    state = choose(idle, walking);
                    nState = true;
                }
                else
                {
                    if (random(100)&gt;75)
                    {
                        state = conjure;
                        nState = true;
                    }
                    else
                    {
                        state = walking;
                        nState = true;
                    }
                    founHimTimer = 0;
                }
            }
            
            if (!place_meeting( x+image_xscale, y-3, oParSolid)
            &amp;&amp; !place_meeting( x+image_xscale, y, oEnBlocker) )
            {
                h = image_xscale * move;
                //x += h;
            }
            else
            {
                h = 0;
            }
    
            if (h == 0)
            {
                if (place_meeting(x+1,y-3,oParSolid) &amp;&amp; place_meeting(x-1,y-3,oParSolid))
                {
                    if (random(100) &gt; 50)
                    {
                        state = conjure;
                        nState = true;
                    }else{
                    image_xscale = -image_xscale;
                    state = idle;
                        nState = true;}
                }
                else
                {
                    state = conjure;
                    nState = true;
                }
            }
        }
        else
        {
            if (!place_meeting( x+image_xscale, y-3, oParSolid)
            &amp;&amp; !place_meeting( x+image_xscale, y-3, oEnBlocker) )
            {
                h = image_xscale * move;
                //x += h;
            }
            else
            {
                h = 0;
            }
    
            if (h == 0)
            {
                if (place_meeting(x+1,y-3,oParSolid) &amp;&amp; place_meeting(x-1,y-3,oEnBlocker))
                {
                    state = idle;
                    nState = true;
                }
                else
                {
                    image_xscale = -image_xscale;
                    state = idle;
                    nState = true;
                }
            }
        }
        sprite_index = sSorcererWalk;
        if ( move == movePlus )
        {
            image_speed = 0.4;
        }
        else
        {
            image_speed = 0.25;
        }
    }     
        
        
        
        
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
state = hitshock;
nState = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sSorcererHit )
{
    sightRadius();
    contactDamage = 1;
    if ( foundHim == true )
    {
        sightCloseQuarters();
        if ( isClose == false )
        {
            state = conjure;
            nState = true;
        }
        else
        {
            state = walking;
            nState = true;
        }
    }
    else
    {
        state = choose(walking, idle);
        nState = true;
    }
}

if ( sprite_index == sSorcererCast )
{
    sightRadius();
    if ( foundHim == true )
    {
        sightCloseQuarters();
        if ( isClose == true )
        {
            state = walking;
            nState = true;
        }
        else
        {
            state = idle;
            nState = true;
        }
    }
    else
    {
        contactDamage = contactDamageRegular;
        state = choose(idle, walking);
        nState = true;
    }
}

if ( sprite_index == sSorcererConjure )
{
    state = attacking;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(sSkelombieMask, 0, x, y);
draw_self();
/*
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x,y-30,"State: "+string(state));
draw_text(x,y-50,"FoundYou: "+string(foundHim));
draw_text(x,y-80,"UpClose: "+string(isClose));
//draw_text(x-10, y-84,"facing: "+string(facing));
draw_set_halign(false);
draw_set_color(c_purple);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
