<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTitleBG1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Bg1
xscale1 = 1;
yscale1 = 1;
//BG2
xscale2 = 1.2;
yscale2 = 0.95;
//BG3
xscale3 = 1.2;
yscale3 = 0.95;
//Wisp 1
xscale4 = 1;
yscale4 = 1;

//Wisp2
xscale5 = 0.95;
yscale5 = 0.95;

//Wisp3
xscale6 = 1.05;
yscale6 = 1.05;
//Wisp4
xscale7 = 0.90;
yscale7 = 0.90;
//Wisp5
xscale8 = 1;
yscale8 = 1;
//Wisp6
xscale9 = 0.87;
yscale9 = 0.87;

headerOffX = 0;
headerOffY = 0;
headerOffCount = 0;
headerOffMax = 3;
up      = "up";
down    = "down";
headerOffPos = down;

squish = "squish";
squash = "squash";

//wisp1
wisp1OffCount = 0;
wisp1OffMax = 5;
wisp1OffSpeed = 10;
wisp1OffPos = up;
wisp1Scaling = squish;

//wisp2
wisp2OffCount = 0;
wisp2OffPos = down;
wisp2OffMax = 7;
wisp2OffSpeed = 8;
wisp2Scaling = squish;

//wisp3
wisp3OffCount = 0;
wisp3OffPos = down;
wisp3OffMax = 7;
wisp3OffSpeed = 8;
wisp3Scaling = squish;

//wisp4
wisp4OffCount = 0;
wisp4OffPos = up;
wisp4OffMax = 3;
wisp4OffSpeed = 13;
wisp4Scaling = squish;

//wisp5
wisp5OffCount = 0;
wisp5OffPos = up;
wisp5OffMax = 5;
wisp5OffSpeed = 8;
wisp5Scaling = squish;

//wisp6
wisp6OffCount = 0;
wisp6OffPos = down;
wisp6OffMax = 7;
wisp6OffSpeed = 8;
wisp6Scaling = squish;

bg2 = squish;
bg3 = squish;


alarm0 = 0;
alarm1 = 0;
alarm2 = 0;
alarm3 = 0;
alarm4 = 0;
alarm5 = 0;
alarm6 = 0;
alarm7 = 0;
alarm8 = 0;
alarm9 = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp6 Movement
if ( wisp6OffPos == down )
{
    if ( wisp6OffCount &lt; wisp6OffMax )
    {
        wisp6OffCount += 1;
    }
    else
    {
        wisp6OffPos = up;
    }
}
else if ( wisp6OffPos == up )
{
    if ( wisp6OffCount &gt; -wisp6OffMax )
    {
        wisp6OffCount -= 1;
    }
    else
    {
        wisp6OffPos = down;
    }
}
alarm9 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp5 Movement
if ( wisp5OffPos == down )
{
    if ( wisp5OffCount &lt; wisp5OffMax )
    {
        wisp5OffCount += 1;
    }
    else
    {
        wisp5OffPos = up;
    }
}
else if ( wisp5OffPos == up )
{
    if ( wisp5OffCount &gt; -wisp5OffMax )
    {
        wisp5OffCount -= 1;
    }
    else
    {
        wisp5OffPos = down;
    }
}
alarm8 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp4 Movement
if ( wisp4OffPos == down )
{
    if ( wisp4OffCount &lt; wisp4OffMax )
    {
        wisp4OffCount += 1;
    }
    else
    {
        wisp4OffPos = up;
    }
}
else if ( wisp4OffPos == up )
{
    if ( wisp4OffCount &gt; -wisp4OffMax )
    {
        wisp4OffCount -= 1;
    }
    else
    {
        wisp4OffPos = down;
    }
}
alarm7 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp3 Movement
if ( wisp3OffPos == down )
{
    if ( wisp3OffCount &lt; wisp3OffMax )
    {
        wisp3OffCount += 1;
    }
    else
    {
        wisp3OffPos = up;
    }
}
else if ( wisp3OffPos == up )
{
    if ( wisp3OffCount &gt; -wisp3OffMax )
    {
        wisp3OffCount -= 1;
    }
    else
    {
        wisp3OffPos = down;
    }
}
alarm6 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp2 Movement
if ( wisp2OffPos == down )
{
    if ( wisp2OffCount &lt; wisp2OffMax )
    {
        wisp2OffCount += 1;
    }
    else
    {
        wisp2OffPos = up;
    }
}
else if ( wisp2OffPos == up )
{
    if ( wisp2OffCount &gt; -wisp2OffMax )
    {
        wisp2OffCount -= 1;
    }
    else
    {
        wisp2OffPos = down;
    }
}
alarm5 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wisp1 Movement
if ( wisp1OffPos == down )
{
    if ( wisp1OffCount &lt; wisp1OffMax )
    {
        wisp1OffCount += 1;
    }
    else
    {
        wisp1OffPos = up;
    }
}
else if ( wisp1OffPos == up )
{
    if ( wisp1OffCount &gt; -wisp1OffMax )
    {
        wisp1OffCount -= 1;
    }
    else
    {
        wisp1OffPos = down;
    }
}
alarm4 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( bg3 == squash )
{
    xscale3 = 1.2;
    yscale3 = 0.95;
}
else
{
    xscale3 = 0.95;
    yscale3 = 1.05;
}
alarm3 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( bg2 == squash )
{
    xscale2 = 1.2;
    yscale2 = 0.95;
}
else
{
    xscale2 = 0.95;
    yscale2 = 1.05;
}
alarm2 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( bg2 == squash )
{
    xscale1 = 1.2;
    yscale1 = 0.95;
}
else
{
    xscale1 = 0.95;
    yscale1 = 1.05;
}
    
alarm1 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Header Movement
if ( headerOffPos == down )
{
    if ( headerOffCount &lt; headerOffMax )
    {
        headerOffCount += 1;
    }
    else
    {
        headerOffPos = up;
    }
}
else if ( headerOffPos == up )
{
    if ( headerOffCount &gt; -headerOffMax )
    {
        headerOffCount -= 1;
    }
    else
    {
        headerOffPos = down;
    }
}
alarm0 = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale1 = Approach(xscale1, 1, 0.01);
yscale1 = Approach(yscale1, 1, 0.01);

if (bg2 == squish)
{
    xscale2 = Approach(xscale2, 1, 0.0005);
    yscale2 = Approach(yscale2, 1, 0.0005);
}
else
{
    xscale2 = Approach(xscale2, 1.2, 0.0005);
    yscale2 = Approach(yscale2, 0.95, 0.0005);
}
if (bg3 == squish)
{
    xscale3 = Approach(xscale3, 1, 0.001);
    yscale3 = Approach(yscale3, 1, 0.001);
}
else
{
    xscale3 = Approach(xscale3, 1.2, 0.0001);
    yscale3 = Approach(yscale3, 0.95, 0.0001);
}
if ( wisp1Scaling == squish )
{
    xscale4 = Approach(xscale4, 0.85, 0.001);
    yscale4 = Approach(yscale4, 0.85, 0.001);
}
else
{
    xscale4 = Approach(xscale4, 1.05, 0.01);
    yscale4 = Approach(yscale4, 1.05, 0.01);
}

if ( wisp2Scaling == squish )
{
    xscale5 = Approach(xscale5, 0.85, 0.001);
    yscale5 = Approach(yscale5, 0.85, 0.001);
}
else
{
    xscale5 = Approach(xscale5, 1.05, 0.01);
    yscale5 = Approach(yscale5, 1.05, 0.01);
}

if ( wisp3Scaling == squish )
{
    xscale6 = Approach(xscale6, 0.85, 0.001);
    yscale6 = Approach(yscale6, 0.85, 0.001);
}
else
{
    xscale6 = Approach(xscale6, 1.05, 0.01);
    yscale6 = Approach(yscale6, 1.05, 0.01);
}

if ( wisp4Scaling == squish )
{
    xscale7 = Approach(xscale7, 0.85, 0.001);
    yscale7 = Approach(yscale7, 0.85, 0.001);
}
else
{
    xscale7 = Approach(xscale7, 1.05, 0.01);
    yscale7 = Approach(yscale7, 1.05, 0.01);
}

if ( wisp5Scaling == squish )
{
    xscale8 = Approach(xscale8, 0.85, 0.001);
    yscale8 = Approach(yscale8, 0.85, 0.001);
}
else
{
    xscale8 = Approach(xscale8, 1.05, 0.01);
    yscale8 = Approach(yscale8, 1.05, 0.01);
}

if ( wisp6Scaling == squish )
{
    xscale9 = Approach(xscale9, 0.85, 0.001);
    yscale9 = Approach(yscale9, 0.85, 0.001);
}
else
{
    xscale9 = Approach(xscale9, 1.05, 0.01);
    yscale9 = Approach(yscale9, 1.05, 0.01);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (xscale2 == 1 || xscale2 == 1.2)
{
    if ( bg2 == squash )
    {
        bg2 = squish;
    }
    else
    {
        bg2 = squash;
    }
}

if (xscale3 == 1 || xscale3 == 1.2)
{
    if ( bg3 == squash )
    {
        bg3 = squish;
    }
    else
    {
        bg3 = squash;
    }
}
if ( xscale4 == 0.85 || xscale4 == 1.05 )
{
    if ( wisp1Scaling == squash )
    {
        wisp1Scaling = squish;
    }
    else
    {
        wisp1Scaling = squash;
    }
}

if ( xscale5 == 0.85 || xscale5 == 1.05 )
{
    if ( wisp2Scaling == squash )
    {
        wisp2Scaling = squish;
    }
    else
    {
        wisp2Scaling = squash;
    }
}

if ( xscale6 == 0.85 || xscale6 == 1.05 )
{
    if ( wisp3Scaling == squash )
    {
        wisp3Scaling = squish;
    }
    else
    {
        wisp3Scaling = squash;
    }
}

if ( xscale7 == 0.85 || xscale7 == 1.05 )
{
    if ( wisp4Scaling == squash )
    {
        wisp4Scaling = squish;
    }
    else
    {
        wisp4Scaling = squash;
    }
}

if ( xscale8 == 0.85 || xscale8 == 1.05 )
{
    if ( wisp5Scaling == squash )
    {
        wisp5Scaling = squish;
    }
    else
    {
        wisp5Scaling = squash;
    }
}

if ( xscale9 == 0.85 || xscale9 == 1.05 )
{
    if ( wisp6Scaling == squash )
    {
        wisp6Scaling = squish;
    }
    else
    {
        wisp6Scaling = squash;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Moving the header
if ( alarm0 == 0 )
{
    alarm[0] = 20;
    alarm0 = 1;
}
if ( alarm4 == 0 )
{
    alarm[4] = wisp1OffSpeed;
    alarm4 = 1;
}

if ( alarm5 == 0 )
{
    alarm[5] = wisp2OffSpeed;
    alarm5 = 1;
}

if ( alarm6 == 0 )
{
    alarm[6] = wisp3OffSpeed;
    alarm6 = 1;
}

if ( alarm7 == 0 )
{
    alarm[7] = wisp4OffSpeed;
    alarm7 = 1;
}

if ( alarm8 == 0 )
{
    alarm[8] = wisp5OffSpeed;
    alarm8 = 1;
}

if ( alarm9 == 0 )
{
    alarm[9] = wisp6OffSpeed;
    alarm9 = 1;
}
//BG1 Pulsate
/*
if (alarm1 == 0)
{
    alarm[1] = random_range(10, 60);
    alarm1 = 1;
}

//BG2 Pulsate
if (alarm2 == 0 &amp;&amp; xscale2 == 1)
{
    alarm[2] = 1;
    alarm2 = 1;
}

//BG3 Pulsate
if (alarm3 == 0 &amp;&amp; xscale3 == 1)
{
    alarm[3] = 1;
    alarm3 = 1;
}
/*


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//BG1
draw_sprite_ext(sTitleBG1, image_index, x, y, image_xscale * xscale1, yscale1, 0, c_white, image_alpha);
//BG2
draw_sprite_ext(sTitleBG2, image_index, x+170, y+98, image_xscale * xscale2, yscale2, 0, c_white, image_alpha);
//BG3
draw_sprite_ext(sTitleBG3, image_index, x+170, y+99, image_xscale * xscale3, yscale3, 0, c_white, image_alpha);

//Little Wisp 1
draw_sprite_ext(sTitleWisp2, image_index, x+266, y+(156+wisp3OffCount), image_xscale * xscale6, yscale6, 0, c_white, image_alpha);

//Little Wisp 2
draw_sprite_ext(sTitleWisp2, image_index, x+240, y+(18+wisp4OffCount), image_xscale * xscale7, yscale7, 0, c_white, image_alpha);

//Little Wisp 3
draw_sprite_ext(sTitleWisp2, image_index, x+83, y+(159+wisp5OffCount), -1 * xscale8, yscale8, 0, c_white, image_alpha);

//Little Wisp 5
draw_sprite_ext(sTitleWisp2, image_index, x+140, y+(104+wisp6OffCount), -1 * xscale9, yscale9, 0, c_white, image_alpha);

//Trees
draw_sprite_ext(sTitleTrees, image_index, x, y, image_xscale, image_yscale, 0, c_white, image_alpha);
//Wisps1
draw_sprite_ext(sTitleWisp1, image_index, x+295, y+(79+wisp1OffCount), image_xscale * xscale4, yscale4, 0, c_white, image_alpha);

//Wisp2
draw_sprite_ext(sTitleWisp1, image_index, x+25, y+(115+wisp2OffCount), -1 * xscale5, yscale5, 0, c_white, image_alpha);

//Header
draw_sprite_ext(sTitleHeader, image_index, x, y+headerOffCount, image_xscale, image_xscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
