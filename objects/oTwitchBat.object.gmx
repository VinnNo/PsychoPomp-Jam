<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTwitchBat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sFlyEyeMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats
contactDamage = 1;

hpMax = 1;
hp = hpMax;

spd1 = 1.5;
spd2 = 1.5;
xPosPrev = x;
yPosPrev = y;

coolDownTimer = 0;
coolDownTimerMax = 15;

dir = 0;

hSight = 128;
vSight = 128;
foundHim = false;

withinView = false;

idle        = "idle";
chasing     = "chasing";
retreat     = "retrteat"
state = idle;
nState = true;
animStateSwitch = false;

image_index = random_range(0, 5);

deathSeq    = sTwitchBatDie;
oName       = "TwitchBat";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
var ID;
ID = instance_create(xprevious,yprevious,oEnemyDeath);
ID.oName = oName;
ID.sprite_index = deathSeq;
ID.image_xscale=image_xscale;
ID.baseValue -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( place_meeting(x, y, oParSolid) )
{
    x = xPosPrev;
    y = yPosPrev;
}


if ( place_meeting(x+spd1, y, oParSolid)
|| place_meeting(x-spd1, y, oParSolid)
|| place_meeting(x, y+spd1, oParSolid)
|| place_meeting(x, y-spd1, oParSolid) )
{
    h = -h;
    v = -v;
}

if ( h != 0 )
{
    if ( h &gt; 0 )
    {
        if ( state == idle )
        {
            h = 0;
        }
        else if ( state == chasing )
        {
            if ( h &gt; spd2 )
            {
                h = spd2;
            }
        }
        else if ( state == retreat )
        {
            if ( h &gt; spd1 )
            {
                h = spd1;
            }
        }
    }
    else if ( h &lt; 0 )
    {
        if ( state == idle )
        {
            h = 0;
        }
        else if ( state == chasing )
        {
            if ( h &lt; spd2 )
            {
                h = -spd2;
            }
        }
        else if ( state == retreat )
        {
            if ( h &lt; spd1 )
            {
                h = -spd1;
            }
        }
    }
}

if ( v != 0 )
{
    if ( v &gt; 0 )
    {
        if ( state == idle )
        {
            v = 0;
        }
        else if ( state == chasing )
        {
            if ( v &gt; spd2 )
            {
                v = spd2;
            }
        }
        else if ( state == retreat )
        {
            if ( v &gt; spd1 )
            {
                v = spd1;
            }
        }
    }
    else if ( v &lt; 0 )
    {
        if ( state == idle )
        {
            v = 0;
        }
        else if ( state == chasing )
        {
            if ( v &lt; spd2 )
            {
                v = -spd2;
            }
        }
        else if ( state == retreat )
        {
            if ( v &lt; spd1 )
            {
                v = -spd1;
            }
        }
    }
}
    
x += h;
y += v;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
if ( !place_meeting(x, y, oParSolid) )
{
    xPosPrev = x;
    yPosPrev = y;
}

if (hp &lt;= 0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( frozen == false ) 
{
    sightRadius()
    if ( foundHim )
    {
        if ( state == idle )
        {
            state = choose(chasing, retreat);
            nState = true;
        }
    }
    else
    {
        state = idle;
        nState = true;

    }
    
    if ( state == idle )
    {
        if ( nState == true )
        {
            sprite_index = sTwitchBat;
            image_speed = 0.15;
            coolDownTimer = 0;
            h = 0;
            v = 0;
            nState = false;
        }
    }
    else if ( state == chasing )
    {
        if ( nState == true )
        {
            sprite_index = sTwitchBat;
            image_speed = 0.2;
            coolDownTimer = 0;
            dir = point_direction(x, y, oPlayer.x, oPlayer.y)
            h = 0;
            v = 0;
            nState = false;
        }
        
        if ( coolDownTimer &lt; coolDownTimerMax )
        {
            coolDownTimer += 1;
        }
        
        if ( coolDownTimer == coolDownTimerMax )
        {
            state = retreat;
            nState = true;
        }
        h += lengthdir_x(spd2, dir)
        v += lengthdir_y(spd2, dir)
    }
    else if ( state == retreat )
    {
        if ( nState == true )
        {
            sprite_index = sTwitchBat;
            image_speed = 0.15;
            coolDownTimer = 0;
            h = 0;
            v = 0;
            direction = random(360);
            dir = direction;
            nState = false;
        }
        if ( coolDownTimer &lt; coolDownTimerMax )
        {
            coolDownTimer += 1;
        }
        
        if ( coolDownTimer == coolDownTimerMax )
        {
            state = chasing;
            nState = true;
        }
        h += lengthdir_x(spd1, dir)
        v += lengthdir_y(spd1, dir)
    }
}
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x+60,y-30,"State: "+string(state));
draw_text(x-10, y-84,"cooldown: "+string(coolDownTimer));
draw_set_halign(false);
draw_set_color(c_purple);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
