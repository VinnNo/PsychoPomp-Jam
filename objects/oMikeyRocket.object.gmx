<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMikeyRocketWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-201</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sJellyOneMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//************(Mandatory variables)*************\\
contactDamage = 1;  //Damage to oPlayer

hpMax = 1;          //Starting HP

m = 0.2;            //Over all movement

//Set Generic Variables             
enemyWalkerCreate();

//**********(Set custom physics here)*************\\
jumpHeight = 20 * m;
gravFall = 1 * m;
gravRise = 1 * m;
turnAtLedge = true;

hSight = 48;
vSight = 16;

kJumpPress = false;
facingPrev = 0;

state = idle;
nState = true;

//Timers
idleTime = 0
idleTimeMax = 80;
shootTime = 0;
shootTimeMax = 120;
canShoot = true;
transTime = 0;
transTimeMax = 120;

//System variables
jumper          = 0;
jumpPercent     = 0;
ledgeWalker     = 0;
ledgeHeight     = 0;
ledgeHopper     = 0;
hopHeight       = 0;
gapHopper       = 0;
gapLength       = 0;

jumpTime = 0;
jumpTimeMax = 8;

//**********(Sprite Index)************************\\
idleSprite      = sMikeyRocketIdle;
runSprite       = sMikeyRocketWalk;
hitSprite       = sMikeyRocketHit;
jumpSprite      = sMikeyRocketJump;
attackSprite   = sMikeyRocketShoot;
//Enemy Specific

//Speeds
animSpeed = 0;

isAttacking = false;

//**********(Death events)*************************\\
deathSeq = sMikeyHelmToss;
oName = "Skeleton";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//enemyDestroy();

var angerID;
createID = instance_create(x, y, oMikeyRegular);
if ( image_xscale == RIGHT )
{
    createID.kRight = true;
    createID.image_xscale = RIGHT;
}
else
{
    createID.kLeft = true;
    createID.image_xscale = LEFT;
}
createID.facing = facing;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at Ledges
hasTurned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
enemyWalkerCollision();
if ( turnAtLedge == true )
{
    enemyWalkerCheckLedges(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PreAction
//Life Check
if (hp &lt;= 0)
instance_destroy();

onGround = OnGround();

if (kJumpPress)
kJump = true;

var onGroundPrev = onGround;
if (onGround &amp;&amp; !onGroundPrev) 
{
    // Squash + stretch
    xscale = 1.5;
    yscale = 0.5;
    // Dust particles
    for (var i = 0; i &lt; 4; i++)
        instance_create(random_range(bbox_left, bbox_right), bbox_bottom, oFxDust);
}

if ( !canShoot )
{
    shootTime += 1;
    if ( shootTime == shootTimeMax )
    {
        canShoot = true;
        shootTime = 0;
    }
}

if ( kJump == true )
{
    kJump = false;
    kJumpRelease = true;
}

if ( kJumpRelease == true )
{
    kJumpRelease = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
onGround = OnGround();
if ( nState == true )
{
    image_index = 0;
    if ( kJumpPress == true )
    {
        kJump = true;
    }
}

sightRadius();
if ( foundHim == true &amp;&amp; canShoot &amp;&amp; onGround )
{
    if ( !isAttacking &amp;&amp; state != idle )
    {
        state = attacking1;
        nState = true;
        isAttacking = true;
    }
}

if ( !onGround )
{
    animSpeed = 0;
}

if ( state == idle )
{
    if ( nState == true )
    {
        image_index = 0;
        idleTime = 0;
        kRight = false;
        kLeft = false;
        if (kJumpPress == true )
        {
            kJump = true;
            kJumpPress = false;
        }
        nState = false;
    }
    if ( animStateSwitch == false )
    {
        idleTime += 1;
        if ( idleTime == idleTimeMax )
        {
            animStateSwitch = true;
        }
    }
    animSpeed = 0.15;
}
else if ( state == walking )
{
    if ( nState == true )
    {
        image_index = 0;
        if ( facingPrev != 0 )
        {
            facing = facingPrev;
            if ( facing == 1 )
            {
                vx = 0.1;
                kRight = true;
            }
            else
            {
                vx = -0.1;
                kLeft = true;
            }   
            facingPrev = 0;
        }
        if ( facing == 1 )
        {
            vx = 0.1;
            kRight = true;
        }
        else
        {
            vx = -0.1;
            kLeft = true;
        }
        nState = false;
    }
    enMikeySystem(jumper, jumpPercent, ledgeWalker, ledgeHeight, ledgeHopper, hopHeight, gapHopper, gapLength)
    enemyWalkerDirection();
} 
else if ( state == attacking1 )
{
    if ( nState == true )
    {
        image_index = 0;
        kRight = false;
        kLeft = false;
        if ( kJumpPress == true )
        {
            kJump = true;
            kJumpPress = false;
        }
        nState = false;
    }
    animSpeed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Step
enemyWalkerStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeleeAttack_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var collisionTop;
collisionTop = bbox_top + 3;
//if ( !place_meeting(x, collisionTop, other)
//|| !place_meeting(x, bbox_top, other) )
if ( other.bbox_bottom &gt; collisionTop )
{
    other.baddieID = id;
    with (other)
    {
        playerGetHit();
    }
}

else //if ( other.vy &gt;= 0 )
{
    if ( other.vy &lt; 0 ) 
            var bounceHeight;
            bounceHeight = other.jumpHeight/2;
            //other.x = other.xprevious;
            //other.y = other.yprevious;
            other.vy = -bounceHeight;

    other.baddieID = id;
    with (other)
    {
        playerGetHit();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == idleSprite )
{
    if ( animStateSwitch == true )
    {
        state = walking;
        animStateSwitch = false;
        nState = true;
    }
}

if ( sprite_index == attackSprite )
{
    var shotID;
    shotID = instance_create(x, y, oMikeyShot2);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ledgeTestsDraw();
switch (actionState) 
{
    case STAND:
        if (state == isHit)
        {
            sprite_index = hitSprite;
        }
        else if ( isAttacking )
        {
            if ( state == attacking1 )
            {
                sprite_index = attackSprite;
            }
        }
        else
        {
            sprite_index = idleSprite;
        }
        image_speed = animSpeed;
    break;
    
    case RUN:
        if (state == isHit)
        {
            sprite_index = hitSprite;
        }
        else
        {
            //image_speed = 0.15;
            var runSpeed;
            runSpeed = vx;
            if (runSpeed &lt; 0 )
            {
                runSpeed = -runSpeed;
            }
            runAnim = runSpeed;
            image_speed = runAnim/7.5;
            sprite_index = runSprite;
        }
    break;
    
    case JUMP:
        if (state == isHit)
        {
            sprite_index = hitSprite;
        }
        // Mid jump
        else
        {
            sprite_index = jumpSprite;
        if (!(place_meeting(x, y + 2, oParSolid) &amp;&amp; vy != 0) &amp;&amp; vy &gt;= -1.0 &amp;&amp; vy &lt;= 1.0) 
        {  
            image_index = 1; 
        } 
        else 
        { 
            // Rise + fall
            if (vy &lt;= 0)
            { 
                image_index = 0;
            }  
            else
            {
                image_index = 2;
            }
        }
    }
    break;
    image_speed = animSpeed;
}

draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
