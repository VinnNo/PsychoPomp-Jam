<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLoomerBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sJellyOneMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contactDamage = 1;

hpMax = 1;

m = 0.3;

event_inherited();
enemyWalkerCreate();

idleSprite      = sLoomerBase;
runSprite       = sLoomerBase;
attackSprite    = sLoomerShoot;
hitSprite       = sLoomerHit;

isAttacking = false;
canShoot = true;
shootTime = 0;
shootTimeMax = 80;

floatPoint = 1;
floatPointPrev = 0;
floatTime = 0;
floatTimeMax = 10;

deathSeq = sLoomerHit;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>generalCollision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( state == idle )
{
    if ( nState == true )
    {
        image_index = 0;
        if ( floatPointPrev != 0 )
        {
            floatPoint = floatPointPrev;
        }
        else
        {
            floatPoint = 0;
        }   
        nState = false;
    }
    
    if ( floatPoint &gt; 0 )
    {
        kDown = false;
        kUp = true;
    }
    else
    {
        kUp = false;
        kDown = true;
    }
    
    sightRadius()
    if ( foundHim == true )
    {
        if ( canShoot )
        {
            state = shoot1;
            nState = true;
        }
    }
    floatTime += 1;
    if ( floatTime == floatTimeMax )
    {
        floatTime = 0;
        floatPoint = -floatPoint;
    }
    enemyWalkerDirection();
    animSpeed = 0.15;
}
else if ( state == shoot1 )
{
    if ( nState == true )
    {
        image_index = 0;
        isAttacking = true;
        kUp = false;
        kDown = false;
        kRight = false;
        kLeft = false;
        nState = false;
    }
    animSpeed = 0.25;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floating
if ( floatPoint == 1 )
{
    kDown = true;
    kUp = false;
}
else if ( floatPoint == -1 )
{
    kUp = true;
    kDown = false;
}

if ( vy == 0 )
{
    if ( floatPoint == 1 )
    {
        floatPoint = -1;
    }
    else if ( floatPoint = -1)
    {
        floatPoint = 1;
    }
    xscale = 1.2;
    yscale = 0.8;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

// Movement ///////////////////////////////////////////////////////////////////
onGround = OnGround();

// Apply the correct form of acceleration and friction
var tempAccel, tempFric;

if (onGround) 
{  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} 
else 
{
    tempAccel = airAccel;
    tempFric  = airFric;
}



// Fall normally

if ( kUp &amp;&amp; !kDown )
{
    floatPoint = -1;
    actionState = RUN;
    vy = Approach(vy, -vyMax, 0.1);
}
else if ( kDown &amp;&amp; !kUp )
{
    floatPont = 1;
    actionState = RUN;
    vy = Approach(vy, vyMax, 0.1);
}


// Left 
if (kLeft &amp;&amp; !kRight) 
{
    facing = LEFT;
    actionState  = RUN;
    
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);
}    
// Right
else if (kRight &amp;&amp; !kLeft) 
{
    facing = RIGHT;
    actionState  = RUN;
    
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}

/*
//Up
if (kUp &amp;&amp; !kDown) 
{
    //floatPoint = -1;
    actionState  = RUN;
    
    // Apply acceleration up
    if (vy &gt; 0)
        vy = Approach(vy, 0, tempFric);   
    vy = Approach(vy, -vyMax, tempAccel);
} 

// Down
else if (kDown &amp;&amp; !kUp) 
{
    //floatPoint = 1;
    actionState  = RUN;
    
    // Apply acceleration right
    if (vy &lt; 0)
        vy = Approach(vy, 0, tempFric);   
    vy = Approach(vy, vyMax, tempAccel);
} 
*/
// Friction
if (!kRight &amp;&amp; !kLeft) 
{
    vx    = Approach(vx, 0, tempFric);
    actionState = STAND;
}
/*
if (!kUp &amp;&amp; !kDown) 
{
    vy    = Approach(vy, 0, tempFric);
    actionState = STAND;
} 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == attackSprite )
{
    isAttacking = false;
    state = idle;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ledgeTestsDraw();
switch (actionState) 
{
    case STAND:
        if (state == isHit)
        {
            sprite_index = hitSprite;
        }
        else if ( isAttacking )
        {
            sprite_index = attackSprite;
        }
        else
        {
            sprite_index = idleSprite;
        }
        image_speed = animSpeed;
    break;
    
    case RUN:
        if (state == isHit)
        {
            sprite_index = hitSprite;
        }
        else
        {
            //image_speed = 0.15;
            var runSpeed;
            runSpeed = vx;
            if (runSpeed &lt; 0 )
            {
                runSpeed = -runSpeed;
            }
            runAnim = runSpeed;
            image_speed = runAnim/7.5;
            sprite_index = runSprite;
        }
    break;
    image_speed = animSpeed;
}

draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
