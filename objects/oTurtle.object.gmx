<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTurtleWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-201</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sTurtleMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//************(Mandatory variables)*************\\
contactDamage = 1;  //Damage to oPlayer

hpMax = 4;          //Starting HP

m = 0.2;            //Over all movement

//Set Generic Variables             
enemyWalkerCreate();

//**********(Set custom physics here)*************\\
turnAtLedge = true;
isShell = false; //To prevent typical deaths.

hSight = 64;
vSight = 32;

canShoot = true;
coolDownTimerMax = 120;

//**********(Death events)*************************\\
deathSeq = sTurtleDie;
oName = "Turtle";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( !isShell )
{
    enemyDestroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at Ledges
hasTurned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
if ( state != shoot1 )
{
    enemyWalkerCollision();
}
if ( turnAtLedge == true )
{
    enemyWalkerCheckLedges(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PreAction
//Life Check
if (hp &lt;= 0)
instance_destroy();

if ( instance_exists(oPlayer) )
{
    if (place_meeting(x, bbox_top, oPlayer) )
    {
        contactDamage = 0;
        with (oPlayer)
        {
            vy = -jumpHeight;
        }
        if ( state != trans1 )
        {
            state = trans1;
            nState = true;
        }
    }
}

/*
if ( instance_exists(oPlayer) )
{
    if ( collision_rectangle(bbox_left+2, bbox_top, bbox_right-2, bbox_bottom, oPlayer, 0, 0) )
    {
        contactDamage = 0;
        with (oPlayer)
        {
            vy = -jumpHeight;
        }
        state = trans1;
        nState = true;
    }
    else
    {
        contactDamage = 1;
    }
}


var onGroundPrev = onGround;
if (onGround &amp;&amp; !onGroundPrev) 
{
    // Squash + stretch
    xscale = 1.5;
    yscale = 0.5;
    // Dust particles
    for (var i = 0; i &lt; 4; i++)
        instance_create(random_range(bbox_left, bbox_right), bbox_bottom, oFxDust);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
onGround = OnGround();

if ( frozen == false )
{
    if ( state == idle )
    {
        state = walking;
        nState = true;
    }
    else if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleWalk;
            image_index = 0;
            if ( facingPrev != 0 )
            {
                image_xscale = facingPrev;
                facingPrev = 0;
            }
            nState = false;
        }
        sightRadius();
        if ( canShoot )
        {
            if ( foundHim )
            {
                
                state = shoot1;
                kLeft = false;
                kRight = false;
                facingPrev = image_xscale;
                enemyFacePlayer(0);
                nState = true;
            }
        }
        else
        {
            coolDownTimer += 1;
            if ( coolDownTimer == coolDownTimerMax )
            {
                canShoot = true;
                coolDownTimer = 0;
            }
        }
        enemyWalkerDirection();
        image_speed = 0.15;
    }
    else if ( state == shoot1 )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleSpit;
            image_index = 0;
            vx = 0;
            nState = false;
        }
        image_speed = 0.15;
    }
    else if ( state == trans1 )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleDuck;
            image_index = 0;
            vx = 0;
            kRight = false;
            kLeft = false;
            nState = false;
        }
        image_speed = 0.25;
    }
}
else
{
    vx = 0;
    image_speed = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Step
enemyWalkerStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeleeAttack_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sTurtleSpit )
{
    var spitID;
    {
        spitID = instance_create(x + 20*image_xscale, y, oTurtleSpit)
        spitID.image_xscale = image_xscale;
    }
    canShoot = false;
    state = walking;
    nState = true;
}

if ( sprite_index == sTurtleDuck )
{
    var ShellID;
    {
        shellID = instance_create(x, y, oTurtleShell);
        shellID.MemoryHP = hp;
    }
    isShell = true;
    instance_destroy();
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(c_red)
//draw_rectangle(bbox_left, bbox_top - 6, bbox_right-4, bbox_bottom, false)
draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
