<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCamTrap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( instance_exists(oPlayer) )
{
    x = oPlayer.x;
    y = oPlayer.y;
}

screenShake = false;
positionXXprevious = xstart;
positionXXcurrent = x;

//positionMoveXX = max(oPlayer.x - sprite_width  * 0.5 + 8, min(x, oPlayer.x + (sprite_width  * 0.5 - 8)));
//positionMoveYY = max(oPlayer.y - sprite_height * 0.5 + 8, min(y, oPlayer.y + (sprite_height * 0.5 - 8)));
h = 0;
v = 0;

atEdge = false;

Left_Sight=   256;
Right_Sight=  256;
Above_Sight=  300;
Below_Sight=  300;

kLeft= false;
kRight= false;
kup= false;
kdown=  false;
kPress= false;

//Target objects
playerObject = "playerObject";
puzzleDoor1 = "puzzleDoor1";
trapDoor1 = "trapDoor1";
railCapObject = "railCapObject";
targetObject = oPlayer;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//These following two values establish the default view scale as a reference point
window_max_w = view_wview;
window_max_h = view_hview;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenShake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position
if (instance_exists(targetObject)) 
{
        x = max(oPlayer.x - sprite_width  * 0.5 + 8, min(x, targetObject.x + (sprite_width  * 0.5 - 8)));
        y = max(oPlayer.y - sprite_height * 0.5 + 8, min(y, targetObject.y + (sprite_height * 0.5 - 8)));
        //scParallax();
        
        // Approach      
        view_xview[0] = Approach(view_xview[0], x - view_wport[0] * 0.5, 10);
        view_yview[0] = Approach(view_yview[0], y - view_hport[0] * 0.5 - 16, 10);
                
        // Make sure camera is inside room
        view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
        view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));      
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screenshake
if (screenShake) {
    view_angle[0] = random_range(-1, 1);
} else {
    // Reset
    view_angle[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Edge Check
/*
kLeft        = keyboard_check(vk_left)  || gamepad_axis_value(0, gp_axisrh) &lt; -0.4;
kRight       = keyboard_check(vk_right) || gamepad_axis_value(0, gp_axisrh) &gt;  0.4;
kUp          = keyboard_check(vk_up)    || gamepad_axis_value(0, gp_axisrv) &lt; -0.4;
kDown        = keyboard_check(vk_down)  || gamepad_axis_value(0, gp_axisrv) &gt;  0.4;
kPress       = gamepad_button_check(0, gp_stickr);
*/

if ( view_xview[0] == (512) || view_xview[0] == (0) )
{
    atEdge = true;
}
else
{
    atEdge = false;
}
/*
if ( view_xview[0] == (room_width  - view_wport[0]) || view_xview[0] == (0  + view_wport[0]))
{
    atEdge = true;
}
else
{
    atEdge = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zooming
/*
//the rate of which the camera zooms in and out. Adjust this to your liking, lower numbers are faster
zoom_speed = 10;

//In the step event of the camera_obj, write this code
//panning

//when the mouse button is pressed, it captures the values of the mouse's X and Y position.
//Because the view is going to be moved, we want the position of the mouse in relation to
// the window, not the view.
if mouse_check_button_pressed(mb_left)
{
mouse_xstart = oPlayer.x;//window_views_mouse_get_x();
mouse_ystart = oPlayer.y;// window_views_mouse_get_y();
}

//so long as the mouse button is held down, the X and Y coordinate of the view will change to
// be the difference between the mouse's current position and the position it was when we started.
if mouse_check_button(mb_left)
{
view_xview += mouse_xstart - window_views_mouse_get_x();
view_yview += mouse_ystart - window_views_mouse_get_y();
}

//zooming
if keyboard_check_pressed(vk_subtract) || gamepad_button_check_pressed(0, gp_shoulderlb)
{
//establish values of the view's current scale for reference
prev_view_x = view_wview;
prev_view_y = view_hview;
//increase the view scale based on our zoom_speed variable. Dividing the value based on
//the original X and Y scales of the view ensure that the aspect ratio remains consistent.
view_hview -= window_max_h/zoom_speed;
view_wview -= window_max_w/zoom_speed;
//we now want the view to zoom in towards the center of the view as opposed to the top
//left corner as it would natural want to do.
view_xview += abs(view_wview-prev_view_x)/2;
view_yview += abs(view_hview-prev_view_y)/2;
}

//and just repeat the same code for zooming out only reverse the math.
if keyboard_check_pressed(vk_add)      || gamepad_button_check_pressed(0, gp_shoulderrb)
{
prev_view_x = view_wview;
prev_view_y = view_hview;
view_hview += window_max_h/zoom_speed;
view_wview += window_max_w/zoom_speed;
view_xview -= abs(view_wview-prev_view_x)/2;
view_yview -= abs(view_hview-prev_view_y)/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Debug
if (game_SETTINGS_DEBUG1 == true)
{
    //draw_self();
    draw_set_font(sFont);
    draw_set_halign(true);
    draw_text(x,y-30,"XVIEW "+string(view_xview[0]));
    draw_text(x, y-50,"YPOS: "+string(y));
    draw_set_halign(false);
    draw_set_color(c_purple);
}
/*
if (game_SETTINGS_DEBUG1 == true)
{
    draw_self();
    draw_set_font(sFont);
    draw_set_halign(true);
    draw_text(x,y-30,"XPOS: "+string(x));
    draw_text(x, y-50,"YPOS: "+string(y));
    draw_set_halign(false);
    draw_set_color(c_purple);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
