<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBigSlimeTwoWalk</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sBigSlimeTwoMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff
canMove = true;
contactDamage = 1;
hpMax = 2;
hp = hpMax;
h = 0;
v = 0;
spd = 0.75;

hSight = 4*16;
vSight = 2*16;

walking     = "walking";
jumping     = "jumping"
attacking   = "attacking";
hitshock    = "hitshock";

state       = jumping;
nState = true;
animStateSwitch = false;


shotCount = 0;
shotCountMax = 1;
creatorID = 0;
//creationCount = 0;

xscalePrev = 0;


maxV = 7;
jumpHeight = 6;
jump = true;

if (random(100)&gt;80)
{
    v = -jumpHeight*1.5;
}
else
{
    v=-jumpHeight;
}

gravRise = 0.5;
gravFall = 0.3;

cooldownTimer = 0;
jumpTime = 50;
chooseTime1 = 20;
chooseTime2 = 40;
chooseTime3 = 60;

Fric = 2;
Accel = 1;

dir = 1;
dir = image_xscale;
image_xscale = choose(1, -1);

deathSeq = sBigSlimeTwoDie;
oName="BigSlimeTwo";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
if (frozen == false){
var ID;
ID = instance_create(xprevious,yprevious,oEnemyDeath);
ID.oName = oName;
ID.sprite_index = deathSeq;
ID.image_xscale=image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
//if (place_meeting(x, y+1, oSpike))
//hp = 0;

if (hp &lt;= 0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
// Actual collision checks + movement
if (frozen == false){
var i;

// Vertical
for (i = 0; i &lt; abs(v); ++i) {
    if (!place_meeting(x, y + sign(v), oParSolid) &amp;&amp; !place_meeting(x, y + sign(v), oParJumpThru))
        y += sign(v);
    else {
        v = 0;
        break;
    }
}

// Horizontal
for (i = 0; i &lt; abs(h); ++i) {
    // UP slope
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 2, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(h), y + 2, oParSolid))
        ++y;      
        
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 
}
}
///////////////////////////////////////////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if (frozen == false){

if (!place_meeting(x, y+1, oParSolid))
{
    jump = true;
    state = jumping;
    nState = true;
}
else
{
    jump = false;
}

if ( state == walking )
{
    if ( nState == true )
    {
        sprite_index = sBigSlimeTwoWalk;
        image_index = 0;
        nState = false;
    }
        
    sightRadius();
    if (foundHim == true)
    {
        xscalePrev = image_xscale;
        animStateSwitch = true;
    }
    
    if ( animStateSwitch == false &amp;&amp; foundHim == false)
    {
        if ( cooldownTimer != jumpTime )
        {
            cooldownTimer += 1;
        }
    
        if ( cooldownTimer == jumpTime )
        {
            if ( random(100) &gt; 75 )
            {
                cooldownTimer = 0;
                v = -jumpHeight;
                jump = true;
                animStateSwitch = true;
                //state = jumping;
                //nState = true;
            }
        }
    }
    
    if (!place_meeting( x+image_xscale, y-3, oParSolid)
    &amp;&amp; !place_meeting( x+image_xscale, y-3, oEnBlocker) )
    {
        h = image_xscale * spd;
    }
    else
    {
        h = 0;
    }
    
               
    if (h == 0)
    {
        if (place_meeting(x+1,y,oParSolid) &amp;&amp; place_meeting(x-1,y,oParSolid))
        {
            image_index=1;
            image_speed=0;
        }
        else
        {
            image_xscale = -image_xscale;
        }
    }
    image_speed = 0.25;
}
else if ( state == jumping )
{
    if ( nState == true )
    {
        sprite_index = sBigSlimeTwoJumpU;
        image_index = 0;
        nState = false;
    }
    
    if (jump)
    {
        if (v &lt; 0)
        {
            sprite_index = sBigSlimeTwoJumpU;
            v = Approach(v, maxV, gravRise);
        }
        else
        {
            sprite_index = sBigSlimeTwoJumpD;
            v = Approach(v, maxV, gravFall);
        }
    
        cooldownTimer = 0;
        if (!place_meeting( x+image_xscale, y-3, oParSolid))
        {
            h = image_xscale * spd/2;
        }
        else
        {
            h = 0;
        }
    
        if ( h == 0 )
        {
            image_xscale = -image_xscale;
        }
    
        if (place_meeting(x, y+1, oParSolid))
        {
            jump = false;
            jumpTime = choose( 20, 40, 60);
            state = walking;
            nState = true;
        }
    }
    else
    {
        state = walking;
        nState = true;
    }
}
else if ( state == attacking )
{
    if ( nState == true )
    {
        sprite_index = sBigSlimeTwoAttack;
        image_index = 0;
        h = 0;
        nState = false;
    }
    
    if ( xscalePrev == 0 )
    {
        xscalePrev = image_xscale;
    }
    
    if (oPlayer.x &gt; x)
    {
        image_xscale = 1;
    }
    else
    {
        image_xscale = -1;
    }
    image_speed = 0.25;
}
}
else
    image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnBlocker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( dir == 1 )
{
    dir = -1;
}
else
{
    dir = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
cooldownTimer = 0;
            v = -jumpHeight;
            jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sBigSlimeTwoWalk )
{
    if ( animStateSwitch == true )
    {
        if ( foundHim == true )
        {
            if ( shotCount &lt;= shotCountMax )
            {
                state = attacking;
            }
            else
            {
                state = jumping;
            }
        }
        else
        {
            state = jumping;
        }
        nState = true;
        animStateSwitch = false;
    }
}

if ( sprite_index == sBigSlimeTwoAttack )
{
    var headID;
    {
        BlobID = instance_create(x+image_xscale*2, y-3, oBigSlimeTwoSpit)
        BlobID.image_xscale = image_xscale;
        BlobID.creatorID = id;
        image_xscale = xscalePrev;
        xscalePrev = 0;
        shotCount += 1;
        if (random(100)&gt;80 &amp;&amp; shotCount &lt;= shotCountMax)
        {
            state = attacking;
            nStat5e = true;
        }
        else
        {
            state = walking;
            nState = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
