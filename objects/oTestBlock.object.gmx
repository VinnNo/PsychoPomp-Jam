<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTestBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_inherited();
jumped = false;
landed = false;

platformTarget = 0;
wallTarget     = 0;

// Velocity
vx = 0;
vy = 0;

// Used for sub-pixel movement
cx = 0;
cy = 0;

onGround = OnGround();


persistBlock = false;

roomPersistID = 0;

bottomSide = bbox_bottom;
topSide = bbox_top;

//For puzzles
specialBlock = false;
puzzleBlock1 = false;
puzzleBlock2 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Actual collision checks + movement
var i;

// Vertical
for (i = 0; i &lt; abs(vy); ++i) 
{
    with (oPlayer) 
    {
        if (place_meeting(x, y + 1, other.id)) 
        {
            if (!PlaceMeetingException(x, y + sign(other.vy), oParSolid, other.id))
                y += sign(other.vy);
        }
        
        if (place_meeting(x, y - 1, other.id))
            y += sign(other.vy);
    }

    if (!place_meeting(x, y + sign(vy), oParSolid))// &amp;&amp; !place_meeting(x, y + 1, oParJumpThru))
        y += sign(vy);
    else {
        vy = 0;
        break;
    }
    if ( place_meeting(x, y + sign(vy), oParJumpThru))
    {
        with (oParJumpThru) 
        {
            if (place_meeting(x, y - 1, other) &amp;&amp; !place_meeting(x, y, other)) 
            {
                // Land
                other.vy = 0;
                other.platformTarget = id;
                break;
            }
        }
   } 
}

// Push stacks of blocks
with (oPushBlock) {
    if (instance_place(x, y + 1, oPushBlock))
       vx = (instance_place(x, y + 1, oPushBlock).vx);
}

// Horizontal
for (i = 0; i &lt; abs(vx); ++i) {      // Move stacks 
    // UP slope
    if (place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y - 1, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(vx), y + 2, oParSolid))
        ++y;       
        
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y, oParEnemy))
        x += sign(vx);
    else { 
        // Push other push blocks
        if (place_meeting(x + sign(vx), y, oPushBlock)) {
            with (instance_place(x + sign(vx), y, oPushBlock))
                if (instance_exists(oPlayer))
                    vx = oPlayer.vx
        } else
            vx = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Gravity
if (!place_meeting(x, y + 1, oParSolid) &amp;&amp; !place_meeting(x, y + 1, oParJumpThru))
    vy += 0.5;

    //if (place_meeting(x, y + 1, oPushBlock))
    //{
         //bottomSide = other.topSide-1;
         //x = other.x;
    //}
    

// MaxV    
if (vy &gt;= 10)
    vy = 10;

    
// Friction 
if (OnGround())   
    vx = Approach(vx, 0, 0.66);
else
    vx = Approach(vx, 0, 0.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
