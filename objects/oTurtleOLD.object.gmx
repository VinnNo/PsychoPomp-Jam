<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTurtleWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sTurtleMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contactDamage = 1;

hpMax = 3;
hp = hpMax;

spd = 0.75;
h = 0;
v = 0;

playerAbove = false;
isShell = false;

facingPrev = 0;
facing = image_xscale;
RIGHT = 1;
LEFT = -1;
xscale = 1;
yscale = 1;

xPrev = 0;
yPrev = 0;

hitLeft = bbox_left;
hitRight = bbox_right;

hSight = 80;
vSight = 32;
foundHim = false;

canShoot = true;
coolDownTimer = 0;
coolDownTimerMax = 120;

walking = "walking";
shooting = "shooting";
ducking = "ducking";
state = walking;
nState = true;
animStateSwitch = false;

deathSeq = sTurtleDie;
oName = "turtle";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( frozen == false )
{
    if ( !isShell )
    {
        var ID;
        ID = instance_create(xprevious,yprevious,oEnemyDeath);
        ID.oName = oName;
        ID.sprite_index = deathSeq;
        ID.image_xscale=image_xscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
/*
if ( place_meeting(x + facing, y, oParSolid) 
||   place_meeting(x + facing, y, oEnBlocker) )
{
    facing = -facing;
}

if ( state == walking )
{
    if ( h != 0 )
    {
        if ( h &gt; 0 )
        {
            if ( h &gt; spd )
            {
                h = spd;
            }
        }
        else if ( h &lt; 0 )
        {
            if ( h &lt; -spd )
            {
                h = -spd;
            }
        }
        x += h;
    }
}
else
{
    h = 0;
}
*/
if ( place_meeting(x, y, oParSolid) )
{
    x = xPrev;
    y = yPrev;
}

if ( playerAbove )
{
    with (oPlayer)
    {
        vy = -jumpHeight;
    }
    state = ducking;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.1);
yscale = Approach(yscale, 1, 0.1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; abs(h); ++i) {
    // UP slope
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(h), y + 2, oParSolid))
        ++y;      
        
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot and Life
if (hp &lt;= 0)
instance_destroy();

if ( !place_meeting(x, y, oParSolid) )
{
    xPrev = x;
    yPrev = y;
}

if ( !canShoot )
{
    coolDownTimer += 1;
    if ( coolDownTimer == coolDownTimerMax )
    {
        canShoot = true;
        coolDownTimer = 0;
    }
}

var playerAbovePrev = playerAbove;
playerAbove         = place_meeting(x, y - 1, oPlayer);

// If it's the first frame of player contact
if (playerAbove &amp;&amp; !playerAbovePrev)
{
    xscale = 1.34;
    yscale = 0.67;
}

if ( state == walking )
{
    
    if ( place_meeting(x + image_xscale, y, oParSolid) )
    {
        image_xscale = -image_xscale;
        facing = image_xscale;
        //facing = -facing;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( frozen == false )
{
    if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleWalk;
            image_index = 0;
            if ( facingPrev != 0 )
            {
                if ( image_xscale != facingPrev )
                {
                    image_xscale = facingPrev;
                    facingPrev = 0;
                }
            }
            nState = false;
        }
        
        sightRadius();
        if ( foundHim  &amp;&amp; canShoot )
        {
            state = shooting;
            nState = true;
        }
        else
        {
            enemyWalk(spd, image_xscale, h);
        }
        image_speed = 0.2;
    }
    else if ( state == ducking )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleDuck;
            image_index = 0;
            nState = false;
        }
        image_speed = 0.33;
    }
    else if ( state == shooting )
    {
        if ( nState == true )
        {
            sprite_index = sTurtleSpit;
            image_index = 0;
            facingPrev = image_xscale;
            if ( oPlayer.x &gt; x )
            {
                image_xscale = RIGHT;
            }
            else
            {
                image_xscale = LEFT;
            }
            nState = false;
        }
        image_speed = 0.15;
    }
}
else
{
    image_speed = 0;
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( place_meeting(x + RIGHT, y, other) &amp;&amp; image_xscale == RIGHT
|| place_meeting(x + LEFT, y, other) &amp;&amp; image_xscale == LEFT ) 
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeleeAttack_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( place_meeting(x + RIGHT, y, other) &amp;&amp; image_xscale == RIGHT
|| place_meeting(x + LEFT, y, other) &amp;&amp; image_xscale == LEFT ) 
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sTurtleSpit )
{
    var spitID;
    {
        spitID = instance_create(x + 20*image_xscale, y, oTurtleSpit)
        spitID.image_xscale = image_xscale;
    }
    canShoot = false;
    state = walking;
    nState = true;
}

if ( sprite_index == sTurtleDuck )
{
    instance_create(x /*+ 4*image_xscale*/, y, oTurtleShell);
    isShell = true;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, image_xscale * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
