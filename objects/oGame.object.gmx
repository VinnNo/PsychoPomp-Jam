<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Stuff?
rm     = -1;
rmPrev = -1;

// Camera /////////////////////////////////////////////////////////////////////

// Camera state
shake     = false;
babyshake = false;
xshake    = choose(-1, 1);
yshake    = choose(-1, 1);
shakeDist = 2;

// Camera offset
xcamo = 0;
ycamo = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System

hp = 0;

//Restart after Death
statusRestart = false;

//Reload important stuff in rooms we've been in
statusRevisit = false;


// Font ///////////////////////////////////////////////////////////////////////
/*
globalvar FONT;
FONT = font_add_sprite(sFont, ord(" "), 0, 1);

draw_set_color(c_white);
draw_set_font(FONT);

fontAng = 0;
fontDir = 1;
*/


//**************(Globals)***************\\
globalvar frozen;
frozen = false;


///***********Player Globals***********\\\
//HP
globalvar player_STATS_MAXHP; 
player_STATS_MAXHP = 6;

globalvar player_STATS_HP;
player_STATS_HP = player_STATS_MAXHP;

//Mana
globalvar player_STATS_MAXMANA;
player_STATS_MAXMANA = 16;

globalvar player_STATS_MANA;
player_STATS_MANA = player_STATS_MAXMANA;

//Pickup Range
globalvar player_STATS_PICKUP_RANGE;
player_STATS_PICKUP_RANGE = 64;

//EctoPlasma AKA Money
globalvar player_STATS_Ecto_Drops;
player_STATS_Ecto_Drops = 0;


///*************Settings************\\\
globalvar game_SETTINGS_DEBUG1;
game_SETTINGS_DEBUG1 = false;

//Music Stuff
musicPitch = 1;
musicPitchPrev = 1;

///***********Persistance*************\\\

moverPathID = noone;
moverPathName = 0;

//Forest1 block1
roomPersistID1 = noone;
//Forest2 block2
roomPersistID2 = noone;
//forest7 block1
roomPersistID3 = noone;
//forest7 block2
roomPersistID4 = noone;
//forest7 door
roomPersistID5 = noone;
//Temple1 block1
roomPersistID6 = noone;
//Temple1 block2
roomPersistID7 = noone;
//Temple1 Door
roomPersistID8 = noone;

ID1Xstart = 0;
ID1Ystart = 0;

ID2Xstart = 0;
ID2Ystart = 0;

ID3Xstart = 0;
ID3Ystart = 0;

ID4Xstart = 0;
ID4Ystart = 0;

ID4Xstart = 0;
ID4Ystart = 0;

ID5Xstart = 0;
ID5Ystart = 0;

ID6Xstart = 0;
ID6Ystart = 0;

ID7Xstart = 0;
ID7Ystart = 0;

ID8Xstart = 0;
ID8Ystart = 0;
///////////////////////////////////////////////////////////////////////////////
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clicky Stuff
lx = 0;
ly = 0;

clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AntiLag
clearAllParticles();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Revisit Room
statusRevisit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart
player_STATS_HP = 6;
player_STATS_MANA = 16;
with (oPlayer)
{
    canMove = true;
}
frozen = false;
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
/*
// Make sure camera is inside room
view_xview[0] = max(0, min(view_xview[0], room_width  - view_wport[0]));
view_yview[0] = max(0, min(view_yview[0], room_height - view_hport[0]));      

// Adjust for screenshake
view_xview[0] += xcamo;
view_yview[0] += ycamo;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Persistant Stuff REF
/*
if ( statusRevisit == true )
{
    if ( room == roomForest1)
    {
        if (roomPersistID1 != noone)
        {
            //with(roomPersistID1)
            //{
                roomPersistID1.x = ID1Xstart;
                roomPersistID1.y = ID1Ystart;
            //}
        }
        
        if (roomPersistID2 != noone)
        {
            //with(roomPersistID2)
            //{
                roomPersistID2.x = ID2Xstart;
                roomPersistID2.y = ID2Ystart;
            //}
        }
    }
    
    if ( room == roomForest7 )
    {
        if ( roomPersistID3 != noone )
        {
            roomPersistID3.x = ID3Xstart;
            roomPersistID3.y = ID3Ystart;
        }
        
        if ( roomPersistID4 != noone )
        {
            roomPersistID4.x = ID4Xstart;
            roomPersistID4.y = ID4Ystart;
        }
        
        if ( roomPersistID5 != noone )
        {
            roomPersistID5.x = ID5Xstart;
            roomPersistID5.y = ID5Ystart;
        }
    }
    
    if ( room = roomTemple1 )
    {
        if ( roomPersistID6 != noone )
        {
            roomPersistID6.x = ID6Xstart;
            roomPersistID6.y = ID6Ystart;
        }
        
        if ( roomPersistID7 != noone )
        {
            roomPersistID7.x = ID7Xstart;
            roomPersistID7.y = ID7Ystart;
        }
        
        if ( roomPersistID8 != noone )
        {
            roomPersistID8.x = ID8Xstart;
            roomPersistID8.y = ID8Ystart;
        }
        if (moverPathID != noone)
        {
            moverPathID.path = moverPathName;
            moverPathID.x = moverIDstartX;
            moverPathID.y = moverIDstartY;
            instance_create(288, 368, oInRoomPortal1);
            instance_create(400, 16, oInRoomPortal2);
        }
    }
    statusRevisit = false;
}
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake
/*
var r;

r = 0;

// Screenshake
if (shake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist;    
        yshake *= -1;
    }
// Small screenshake
} else if (babyshake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist * 0.5;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist * 0.5;    
        yshake *= -1;
    }
} else {
    xcamo = 0;
    ycamo = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limit HP/MP


//Let's get one thing straight!
if (player_STATS_HP &lt; 0)
{
    player_STATS_HP = 0;
}
if (player_STATS_HP &gt; player_STATS_MAXHP)
{
    player_STATS_HP = player_STATS_MAXHP;
}
if (player_STATS_MANA &lt; 0)
{
    player_STATS_MANA = 0;
}
if (player_STATS_MANA &gt; player_STATS_MAXMANA)
{
    player_STATS_MANA = player_STATS_MAXMANA;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music
/*
if ( room == roomForest1 
|| room == roomForest2 
|| roomForest3 
|| roomForest4
|| roomForest5
|| roomForest7
|| roomTemple1)
{
    if (!audio_is_playing(aMoonlight))
    {
        if audio_is_paused(aMoonlight)
        {
            audio_resume_sound(aMoonlight);
        }

        audio_play_sound(aMoonlight, 0, true);
    }
}

if ( room == roomStart1 || room == roomCredits )
{
    if (!audio_is_playing(aStartSong))
    {
        if audio_is_paused(aStartSong)
        {
            audio_resume_sound(aStartSong);
        }

        audio_play_sound(aStartSong, 0, true);
    }
}

if (musicPitch != musicPitchPrev)
{
    audio_sound_pitch(aMoonlight, musicPitch)
    musicPitchPrev = musicPitch;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
image_speed = 0;
// Input variables for debug room traversal
var kRestart, kExit;//, kPrev, kNext;

kRestart = keyboard_check_pressed(ord('R'))    || gamepad_button_check_pressed(0, gp_select);
kExit    = keyboard_check_pressed(vk_escape);
//kPrev    = keyboard_check_pressed(vk_subtract) || gamepad_button_check_pressed(0, gp_shoulderlb);
//kNext    = keyboard_check_pressed(vk_add)      || gamepad_button_check_pressed(0, gp_shoulderrb);

if (kRestart)
    room_restart();
if (kExit)
    game_end();
    
// Iterate through rooms backward
/*
if (kPrev) {
    if (room == room_first)
        room_goto(room_last);
    else
        room_goto_previous();
}

// Iterate through rooms forwards
if (kNext) {
    if (room == room_last)
        room_goto(room_first);
    else
        room_goto_next();
}
*/
/// Debug for path based platform
if (mouse_check_button_pressed(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            
            pPos = pPos * (plen / plennew);
        }
    }
} 

if (mouse_check_button(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_delete_point(path, path_get_number(path) - 1);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
                        
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
            
            pMov = false;
        }
    }
} else {
    with (oPathMover)
        pMov = true;
}

with (oPathMover) {
    pSpd += (mouse_wheel_up() - mouse_wheel_down()) * 2;
    pSpd  = clamp(pSpd, 1, 16);
}

if (statusRestart)
{
    player_STATS_MANA = player_STATS_MAXMANA;
    player_STATS_HP = player_STATS_MAXHP;
    frozen = false;
    statusRestart = false;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);

// INITIAL POINT
if (clickInit) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
// SECONDARY POINT(S)
}// else if (clicked) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
//}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rmPrev = rm;
rm     = room;
/*
xcamo = 0;
ycamo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_circle(lx, ly, 8, true);

//if (clicked)
    //draw_line(oPlayer.x, oPlayer.y - 8, lx, ly);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
