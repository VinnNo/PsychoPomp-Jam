<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPompIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>oParEntity</parentName>
  <maskName>sPompMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Inherit Entity
event_inherited();
RIGHT = 1;
LEFT = -1;
//facing = 1;

canMove = true;
canWalk = true;
physicsLocked = false;

// Create things we need!
if (!instance_exists(oCamera))
{
    instance_create(x, y, oCamera);
    with (oCamera)
    {
        x = oPlayer.x;
        y = oPlayer.y;
        view_xview[0] =  x - view_wport[0] * 0.5;
        view_yview[0] =  y - view_hport[0] * 0.5 - 16;
    }
}
    
if (!instance_exists(oUserInterface))
    instance_create(view_xview[0],view_yview[0],oUserInterface);

// Movement ///////////////////////////////////////////////////////////////////
m = 0.5;

groundAccel = 0.10 * m;
groundFric  = 0.55 * m;
airAccel    = 0.55 * m;
airFric     = 0.25 * m;
vxMax       = 3.50 * m;
vyMax       = 6.0 * m;
jumpHeight  = 6.00 * m;
gravNorm    = 0.5 * m;
gravRise    = 0.2 * m;
gravFall    = 0.3 * m;
gravSlide   = 0.08 * m; 

clingTime   = 4;

// Misc ///////////////////////////////////////////////////////////////////////

// States
IDLE      = 10;
RUN       = 11;
JUMP      = 12;

// Initialize properties
state  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1;
yscale = 1;
slantAngle = 0;

///////////////////////////////////////////////////////////////////////////////
// Collision Stuff
canStick = true;
sticking = false;
skid = false;
runAnim = 0;
isDucking = false;
duckTime = 0;
duckTimeMax = 6;

// Combat
attacking = false;
usingMagic = false;

//Guns
gunID = 0;



// Taking a punch
canHit= true;
isHit = false;
hitTimer = 0;
hitTime = 4;
invincibilityTimer = 0;
cantBeFound = false;
hitSprite = false;
knockBackPlus = false;
baddieID = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats

//Life
hpMax = 6;
hp = hpMax;
canHit = true;
inShock = false;


//Powers
shotCount = 0;
shotMax = 3;
shotTimer = 0;
shotTimerMax = 120;
attDamageMax = 1;
attDamage = attDamageMax;

//Flashy charge colors!
white = "white";
pink = "pink";
pink2 = "pink2";
purple = "purple";
chargeColor = white;
chColorTimer = 0;
chColorTimerMax = 15;
icColorTimer = 0;
icColorTimerMax = 4;

charging = false;
isCharged = false;
chargeStartTime = 30;
chargeTimer = 0;
chargeTimerMax = 120;
attackPlusTimer = 0;
attackPlusTimerMax = 30;
chargingPitch =1;

//Mana Regeneration
manaGainTime = 0;
manaGainTimer = 120;

//Double Jump
skillDoubleJump = false;
doubleJumpHeight = 5 * m;
jumpCount = 0;
jumpMax = 2;

//Dash
canDash = true;

//Attack Combos
attackCount     = 0;
comboTimer      = 0;
comboMaxTime    = 8;
attackCombo = false;

attackUp    = "attackUp";
attackDown  = "attackDown";
attackPos   = 0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transitions
transitionID = noone;
targetRoom = noone;
transX = 0;
transY = 0;

targetCamX = 0;
targetCamY = -24;

wasTransitioned = false;

hpStorage = 0;
manaStorage = 0;

startXPos = x;
startYPos = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PowerUpStuff
mRegular = 0.5;
mPlus = 2.8;
mPushBlock = 0.25;



// Acceleration + friction
groundAccelRegular = 1.0  * m;
groundAccelPlus = 1.5  * m;

airAccelRegular    = 0.75 * m;
airAccelPlus    = 1 * m;

// Max movement speeds
maxHRegular        = 5.5  * m;
maxVRegular        = 9.0  * m;
maxHPlus           = 6.5  * m;
maxVPlus           = 10.0  * m;

maxHPushBlock = 3 * m;

jumpHeightRegular = 7.0 * m;
jumpHeightPlus = 9.0 * m;
jumpHeightPlatform = 12 * m;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset State and Speed
state = IDLE;

if (facing == RIGHT &amp;&amp; vx &gt; vxMax)
vx = vxMax;
else if (facing == LEFT &amp;&amp; vx &lt; -vxMax)
vx = -vxMax; 

 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Attack
attackCombo = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transitions
if (!instance_exists(oCamera))
{
    instance_create(x, y, oCamera);
}


with (oCamera)
{
    x = oPlayer.x;
    y = oPlayer.y;
    view_xview[0] =  x - view_wport[0] * 0.5;
    view_yview[0] =  y - view_hport[0] * 0.5 - 16;
}

player_STATS_HP = hpStorage;
player_STATS_MANA = manaStorage;

hpStorage = 0;
manaStorage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Charging
playerGetInput();
if (kMagicHeld &amp;&amp; charging == false &amp;&amp; isCharged == false)
{
    if (player_STATS_MANA &gt; 0)
    {
        chargingPitch = 1;
        attackPlusTimer = 0;
        chargeTimer = 0;
        charging = true;
        instance_create(x, y, oChargeFX);       
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot End
usingMagic = false;
chargingPitch = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack End
attacking = false;
attackPos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wall Stick
sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit Entity
if ( !physicsLocked )
{
    event_inherited();

    if (place_meeting(x + sign(vx), y, oTestBlock)) {
        // Push slowly
        vx = clamp(vx, -1, 1);
            
        with (instance_place(x + sign(vx), y, oTestBlock)) {
            // UP slope
            if (place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y - 1, oParSolid))
                --y;
            
            // DOWN slope
            if (!place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(other.vx), y + 2, oParSolid))
                ++y;        

            if (!place_meeting(x + sign(other.vx), y, oParSolid))
                x += sign(other.vx); 
            else {
                other.vx = 0;
                break;
            }        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

// Crushed by moving solid
if (place_meeting(x, y, oParSolid))
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Some checks
onGround = OnGround();

var onGroundPrev = onGround;

event_inherited();

// Landing after jump
if (onGround &amp;&amp; !onGroundPrev) 
{
    // Squash + stretch
    xscale = 1.5;
    yscale = 0.5;
    
    //Recover from hitshock
    if (hitSprite)
    {
        hitSprite = false;
    }
    
    if (attacking)
    {
        //if (attackPos != 0 )
        //{
            
            attacking = false;
            attackPos = 0;
        //}
    }
    
    canDash = true;
    
    // Dust particles
    for (var i = 0; i &lt; 4; i++)
        instance_create(random_range(bbox_left, bbox_right), bbox_bottom, oFxDust);
}

if (charging)
{
    canWalk = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other sounds and checks

if (frozen == false){
if ( hp &gt;= 0 )
{
    hp = 0;
}

if (player_STATS_MANA &lt; 0 )
{
    player_STATS_MANA = 0;
    chargingPitch = 1;
}

if (player_STATS_MANA != 16)
{
    if (!charging &amp;&amp; !isCharged)
    {

        manaGainTime += 1;

        if ( manaGainTime == manaGainTimer )
        {
            player_STATS_MANA +=1;
            manaGainTime = 0;
            RegainPoofs();
            chargingPitch = 1;
        }
    }
}

if (shotCount &lt;= 0 )
{
    shotCount = 0;
}

if (onGround)
{
    if (skillDoubleJump)
    {
        jumpCount = 0;
    }
    canDash = true;
}

if ( !onGround )
{
    if ( skid )
    {
        skid = false;
    }
}


if (state == JUMP &amp;&amp; place_meeting(x, y+1, oParSolid))
{
    //audio_play_sound(apLand, 0, false);
        var i;
        for (i = 0; i &lt; 6; ++i)
            with (instance_create(x + random_range(-16, 16), bbox_bottom, oParticle))
                direction = 90 + random_range(-45, 45);
}



if (cLeft)
{
    if (skillDoubleJump)
    {
        jumpCount = 0;
    }
}

if (cRight)
{ 
    if (skillDoubleJump)
    {
        jumpCount = 0;
    }
}

cAbove = place_meeting(x, y - 1, oParSolid);

//onMovingPlatform = (instance_place(x, y + 1, oParMovingPlatform));

/*
if (onMovingPlatform)
{
    with (instance_place(x, y + 1, oParMovingPlatform))
    {
        if (v &lt; 0)
        {

            other.jumpHeight = other.jumpHeightPlatform/2;
        }
    }
}
else
{
    jumpHeight = jumpHeightRegular;
}


rideMoving = (instance_place(x, y -1, oMovingPlat1));

if (wasTransitioned == true)
{
    if (!place_meeting(x, y, oParHBorder) &amp;&amp; !place_meeting(x, y, oParVBorder) )
    {
        wasTransitioned = false;
    }
}


slantRight = (place_meeting(x, y+1, oSlope2R));

slantLeft = (place_meeting(x, y+1, oSlope2L));
if (state == RUN)
{
    if (slantRight)
    {
        slantAngle = 30;
    }
    else if (slantLeft)
    {
        slantAngle = 340;
    }
    else
    {
        slantAngle = 0;
    }
}
else
{
    slantAngle = 0;
}
*/
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller Checks
playerGetInput();
onGround = OnGround();
/*
if ( onGround )
{
    if ( kDown &amp;&amp; !kRight &amp;&amp; !kLeft &amp;&amp; vx == 0 )
    {
        if ( isDucking == false )
        {
            duckTime += 1;
            if ( duckTime == duckTimeMax )
            {
                isDucking = true;
                mask_index = sTwiggyDuckMask;
                duckTime = 0;
            }
        }
    }
    else if ( !kDown )
    {
        isDucking = false;
        duckTime = 0;
    }
    
    if ( !skid )
    {
        if ( (kRight &amp;&amp; vx &lt; 0)
        || (kLeft &amp;&amp; vx &gt; 0) )
        {
            skid = true;
            var i;
            if ( kRight )
            {
                for (i = 0; i &lt; 2; i++)
                instance_create(bbox_left-3, random_range(bbox_bottom, bbox_bottom-4), oFxDust);
            }
            else if ( kLeft )
            {
                for (i = 0; i &lt; 2; i++)
                instance_create(bbox_right+4, random_range(bbox_bottom, bbox_bottom-4), oFxDust);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Systems
if (frozen == false)
{
    if (isHit == true)
    {
        playerIsHit();
    }
    else
    {
        playerSystem();
    }

    if (inShock == true)
    {
        playerHitShock();
    }
    
    if (usingMagic || isCharged || charging )
    {
        playerMagicSystem();
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParEnemy2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hit
/*
if (isHit == false &amp;&amp; canHit == true)
{
    if (other.contactDamage &gt; 0 )
    {
        playerGetHit();
        with (oCamera) {
                alarm[0] = 8;
                screenShake = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get hit
/*
if (isHit == false &amp;&amp; canHit == true)
{
    if (other.contactDamage &gt; 0 )
    {
        playerGetHit();
        with (oCamera) {
                alarm[0] = 8;
                screenShake = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff

if ( sprite_index == sPompHit )
{
    hitSprite = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die outside Screens
with (oUserInterface)
{
    player_STATS_HP = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw sprite
if ( frozen == false) 
{
    playerStateDraw();
    //playerChargeDraw();

    //playerStateDraw();
    if (onGround)
    {
        draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_lime, image_alpha);
    }   
    else
    {
        draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
    }
}
//draw_set_halign(fa_center);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// OLDDraw

draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
/*
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x+60,y-30,"Attack: "+string(attacking));
//draw_text(x-10, y-84,"facing: "+string(facing));
draw_set_halign(false);
draw_set_color(c_purple);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( !physicsLocked )
{
    physicsLocked = true;
    canMove = false;
}
else
{
    physicsLocked = false;
    canMove = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
