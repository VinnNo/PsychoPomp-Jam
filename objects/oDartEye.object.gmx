<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDartEyeIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-201</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;

contactDamage = 1;

hpMax = 1;
hp = hpMax;

//How many blocks we can see
hSight = 5*16;
vSight = 5*16;
closeQuarters = 4*16;
found_him = false;
isClose = false;


spd = 2;
spd2 = 6;
dir = image_xscale;
pathDir = 0;

cooldownTimer = 0;
waitDelay = 30;
waitDelayMax = 30;
shotTime = 0;
shotMax = 30;
floatUp = false;
floatDown = true;
floatTime = 0;
floatMax = 40;
yPosPrev = 0;
xPosPrev = 0;
floatPos = 0;
markedID = 0;

//States
charging = "charging";
flying  = "flying";
isShot = "isShot";
returning = "returning";
idle = "idle";

state = idle;
nState = true;
animStateSwitch = false;

oName = "DartEye";
deathSeq = sDartEyeDie;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
var ID;
ID = instance_create(xprevious,yprevious,oEnemyDeath);
ID.oName = oName;
ID.sprite_index = deathSeq;
ID.image_xscale=image_xscale;
ID.baseValue -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
if (hp &lt;= 0)
{
    if (markedID != 0)
    {
        if ( instance_exists(markedID) )
        {
            with (markedID)
            {
                instance_destroy();
            }
        }
    }
    instance_destroy();
}

if ( state == returning )
{
    if ( y = yPosPrev )
    {
        state = idle;
        nState = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trail
if (state == isShot )
{
    if (random(100) &gt; 0)
    {
        var DartID;
        {
            DartID = instance_create(x, y, oEnemyShotParticle)
            DartID.oName = oName;
            DartID.speed = 0;
            DartID.image_xscale = image_xscale;
            DartID.depth = 1;
        }
    }
}

if ( state == returning )
{
    if ( y = yPosPrev )
    {
        state = idle;
        nState = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( goodtoGo &amp;&amp; frozen == false )
{
    sightRadius();
    if ( foundHim == true )
    {
        if ( oPlayer.x &gt; x )
        {
            dir = 1;
        }
        else
        {
            dir = -1;
        }
    
        image_xscale = dir;
    }
        
    if ( state == idle )
    {
        if ( nState == true )
        {
            sprite_index = sDartEyeIdle;
            image_index = 0;
            cooldownTimer = 0;
            if ( floatPos != 0 )
            {
                if ( floatPos &gt; 0 )
                {
                    floatDown = true;
                    floatUp = false;
                }
                else if ( floatPos &lt; 0 )
                {
                    floatUp = true;
                    floatDown = false;
                }
                floatPos = 0;
            }
            
            if ( xPosPrev != 0 )
            {
                xPosPrev = 0;
            }
            
            if ( yPosPrev )
            {
                yPosPrev = 0;
            }
            if (markedID != 0)
            {
                if (instance_exists(markedID))
                {
                    with (markedID)
                    {
                        instance_destroy();
                    }
                }
            }
            nState = false;
        }
        cooldownTimer += 1;
        if ( cooldownTimer == waitDelay )
        {
            sightRadius();
            if ( foundHim == true )
            {
                    state = charging;
                    nState = true;
            }
            else
            {
                state = flying;
                nState = true;
            }
            cooldownTimer = 0;
        }
        image_speed = 0.15;
    }
    else if ( state == isShot )
    {
        if ( nState == true )
        {
            sprite_index = sDartEyeShot;
            image_index = 0;
            pathDir = point_direction(x, y, oPlayer.x, oPlayer.y-8);
            shotTime = 0;
            nState = false;
        }
        else
        {
            shotTime += 1;
            if (shotTime == shotMax)
            {
                if ( yPosPrev != 0
                || xPosPrev != 0
                || floatPos != 0 )
                {
                    state = returning;
                    nState = true;
                }
                else
                {
                    state = idle;
                    nState = true;
                }
            }
            x += lengthdir_x(spd2, pathDir);
            y += lengthdir_y(spd2, pathDir);
        }
        image_speed = 0.1;
    }
    else if ( state == flying )
    {
        if (nState == true )
        {
            sprite_index = sDartEyeIdle;
            image_index = 0;
            //floatTime = 0;
            nState = false;
        }
        else
        {
            sightRadius();
            if ( foundHim == true )
            {
                state = charging;
                nState = true;
            }
            
            floatTime += 1;
            if ( floatTime &gt;= floatMax )
            {
                if (floatUp)
                {
                    floatUp = false;
                    floatDown = true;
                }
                else
                {
                    floatDown = false;
                    floatUp = true;
                }
                floatTime = 0;
            }
            if ( floatUp )
            {
                if (place_meeting(x, y-1, oParSolid))
                {
                    floatUp = false;
                    floatDown = true;
                }
                y -= spd/2;
            }
            else if (floatDown)
            {
                if (place_meeting(x, y+1, oParSolid))
                {
                    floatDown = false;
                    floatUp = true;
                }
                y += spd/2;
            }
            if (place_meeting(x+image_xscale, y, oParSolid))
            {
                image_xscale = -image_xscale;
            }
            x += image_xscale * spd;
        }
        image_speed = 0.33;
    }
    else if ( state == charging )
    {
        if ( nState == true )
        {
            sprite_index = sDartEyeCharge;
            image_speed = 0;
            if ( xPosPrev == 0 &amp;&amp; yPosPrev == 0 )
            {
                yPosPrev = y;
                xPosPrev = x;
                if ( floatPos == 0 )
                {
                    if ( floatUp )
                    {
                        floatPos = -1;
                    }
                    else if ( floatDown )
                    {
                        floatPos = 1;
                    }
                }
                var markerID;
                {
                    markerID = instance_create(x, y, oEyeDartMarker)
                    markerID.creatorID = id;
                    markedID = markerID.id;
                }
            }
            var SND;
            {
                //SND = audio_play_sound(aDemonCharge, 0, 0)
                //audio_sound_gain(SND, 1, 0)
            }
            nState = false;
        }
        image_speed = 0.25;
    }
    else if ( state == returning )
    {
        if ( nState == true )
        {
            sprite_index = sDartEyeIdle;
            image_index = 0;
            pathDir = point_direction(x, y, markedID.x, markedID.y);
            nState = false;
        }
        
        sightRadius()
        if ( foundHim == true )
        {
            state = charging;
            nState = true;
        }
        
        if (y = markedID.y &amp;&amp; x = markedID.y)
        {
            state = idle;
            nState = true;
        }
        else
        {
            x += lengthdir_x(spd, pathDir);
            y += lengthdir_y(spd, pathDir);
            if ( markedID.x &gt; x)
            {
                image_xscale = 1;
            }
            else
            {
                image_xscale = -1;
            }
        }
    }        
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParEntity">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == returning)
{
    x = other.x;
    y = other.y;
    state = idle;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sDartEyeCharge )
{
    state = isShot;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index != -1)
{
    draw_self();
}
/*
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x+60,y-30,"State: "+string(state));
//draw_text(x-10, y-84,"facing: "+string(facing));
draw_set_halign(false);
draw_set_color(c_purple);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
