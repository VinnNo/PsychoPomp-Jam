<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSorcererIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>sSorcererMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic

//************(Mandatory variables)*************\\
contactDamage = 1;  //Damage to oPlayer

hpMax = 4;          //Starting HP

m = 0.2;            //Over all movement

//Set Generic Variables             
enemyWalkerCreate();

//**********(Set custom physics here)*************\\

turnAtLedge = true;

hSight = 80;
vSight = 64;
closeQuarters = 64;

canShoot = true;

waitTime1 = 60;
waitTime2 = 120;
shootTime = 0;
shootTimeMax = 80;


//**********(Death events)*************************\\
deathSeq = sSorcererDie;
oName = "Skeleton";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemyDestroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn at Ledges
hasTurned = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
enemyWalkerCollision();
if ( turnAtLedge == true )
{
    enemyWalkerCheckLedges(0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PreAction
//Life Check
if (hp &lt;= 0)
instance_destroy();

onGround = OnGround();

if ( !canShoot )
{
    shootTime += 1;
    if ( shootTime == shootTimeMax )
    {
        canShoot = true;
    }
}


var onGroundPrev = onGround;
if (onGround &amp;&amp; !onGroundPrev) 
{
    // Squash + stretch
    xscale = 1.5;
    yscale = 0.5;
    // Dust particles
    for (var i = 0; i &lt; 4; i++)
        instance_create(random_range(bbox_left, bbox_right), bbox_bottom, oFxDust);
}

if ( kJump == true )
{
    kJump = false;
    kJumpRelease = true;
}

if ( kJumpRelease == true )
{
    kJumpRelease = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
onGround = OnGround();
if ( state == idle )
{
    if ( nState == true )
    {
        sprite_index = sSorcererIdle;
        image_index = 0;
        kLeft = false;
        kRight = false;
        canBeHit = true;
        coolDownTimer = 0;
        nState = false;
    }
    
    sightRadius();
    if ( foundHim )
    {
        if ( canShoot )
        {
            state = shoot1;
            nState = true;
        }
        else
        {
            if ( place_meeting(x+image_xscale, y, oPlayer) )
            {
                nState = true;
            }
            else
            {
                state = walking;
                enemyFacePlayer(1);
                nState = true;
            }
        }
    }
    
    coolDownTimer += 1;
    if ( coolDownTimer == waitTime1 )
    {
        if ( random(100) &gt; 80 )
        {
            cooldownTimer = 0;
            nState = true;
        }
        else
        {
            state = walking;
            nState = true;
        }
    }
    image_speed = 0.15;
}
else if ( state == walking )
{
    if ( nState == true )
    {
        sprite_index = sSorcererWalk;
        image_index = 0;
        canBeHit = true;
        if ( random(100) &gt; 50 )
        {
            image_xscale = LEFT;
        }
        else
        {
            image_xscale = RIGHT;
        }
        nState = false;
    }
    
    sightRadius()
    if ( foundHim )
    {
        if ( canShoot )
        {
            state = shoot1;
            nState = true;
        }
        else
        {
            enemyFacePlayer(1);
            if ( place_meeting(x+image_xscale, y, oParSolid) )
            {
                state = idle;
                nState = true;
            }
        }
    }
    coolDownTimer += 1;
    if ( coolDownTimer = waitTime2 )
    {
        state = idle;
        nState = true;
    }
    else
    {
        enemyWalkerDirection();
    }
    image_speed = 0.15; 
}
else if ( state == shoot1 )
{
    if ( nState == true )
    {
        sprite_index = sSorcererConjure;
        image_index = 0;
        kLeft = false;
        kRight = false;
        enemyFacePlayer(0);
        canBeHit = false;
        nState = false;
    }
    image_speed = 0.10;
}
else if ( state == shoot2 )
{
    if ( nState == true )
    {
        sprite_index = sSorcererCast;
        image_index = 0;
        kLeft = false;
        kRight = false;
        enemyFacePlayer(0);
        var conjureID;
        {
            conjureID = instance_create(x-3*image_xscale, y, oSorcShot)
            conjureID.image_xscale = image_xscale;
        }
        canShoot = false;
        canBeHit = false;
        nState = false;
    }
    image_speed = 0.15;
}
else if ( state == isHit )
{
    if ( nState == true )
    {
        sprite_index = sSorcererHit;
        image_index = 0;
        canBeHit = false;
        contactDamge = 0;
        kLeft = false;
        kRight = false;
        nState = false;
    }
    image_speed = 0.6;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Step
enemyWalkerStep();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayerShot">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( canBeHit = true )
{
    event_inherited();
    state = isHit;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oMeleeAttack_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( canBeHit = true )
{
    event_inherited();
    state = isHit;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sSorcererConjure )
{
    state = shoot2;
    nState = true;
}

if ( sprite_index == sSorcererCast )
{
    state = choose(idle, walking);
    canBeHit = true;
    nState = true;
}

if ( sprite_index == sSorcererHit )
{
    canBeHit = true;
    contactDamage = 1;
    state = choose(walking, idle);
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
