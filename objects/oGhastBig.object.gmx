<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGhastIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-201</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy2</parentName>
  <maskName>sGhastBigMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canMove = true;

contactDamage = 1;

hpMax = 2;
hp = hpMax;

//How many blocks we can see
hSight = 12*16;
vSight = 12*16;
closeQuarters = 4*16;
found_him = false;
isClose = false;

spd = 1.5;
dir = image_xscale;
pathDir = 0;

cooldownTimer = 0;
waitDelay = 30;
waitDelayMax = 30;

charging1 = "charging1";
charging2 = "charging2";
flying  = "flying";
idle = "idle";

state = idle;
nState = true;
animStateSwitch = false;

oName = "BigGhast";
deathSeq = sGhastBigDie;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
var ID;
ID = instance_create(xprevious,yprevious,oEnemyDeath);
ID.oName = oName;
ID.sprite_index = deathSeq;
ID.image_xscale=image_xscale;
ID.baseValue -= 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
if (hp &lt;= 0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if ( goodtoGo &amp;&amp; frozen == false )
{
    sightRadius();
    if ( foundHim == true )
    {
        if ( oPlayer.x &gt; x )
        {
            dir = 1;
        }
        else
        {
            dir = -1;
        }
    
        image_xscale = dir;
    }
        
    if ( state == idle )
    {
        if ( nState == true )
        {
            sprite_index = sGhastBigIdle;
            image_index = 0;
            cooldownTimer = 0;
            nState = false;
        }
        cooldownTimer += 1;
        if ( cooldownTimer == waitDelay )
        {
            sightRadius();
            if ( foundHim == true )
            {
                sightCloseQuarters();
                if (!isClose)
                {
                    state = flying;
                    nState = true;
                }
                else
                {
                    state = charging1;
                    nState = true;
                }
            }
            cooldownTimer = 0;
        }
        image_speed = 0.15;
    }
    else if ( state == flying )
    {
        if ( nState == true )
        {
            sprite_index = sGhastBigIdle;
            image_index = 0;
            nState = false;
        }
        else
        {
            sightCloseQuarters();
            if (!isClose)
            {
                if ( y &gt; oPlayer.y )
                    pathDir = point_direction(x, y, oPlayer.x, oPlayer.y-16);
                else if ( y &lt; oPlayer.y)
                    pathDir = point_direction(x, y, oPlayer.x, oPlayer.y+16);
                else
                    pathDir = point_direction(x, y, oPlayer.x, oPlayer.y);
                x += lengthdir_x(spd, pathDir);
                y += lengthdir_y(spd, pathDir);
            }
            else
            {
                state = idle;
                nState = true;
            }   
        }
        image_speed = 0.1;
    }
    else if ( state == charging1 )
    {
        if ( nState == true )
        {
            sprite_index = sGhastBigChargeStart;
            image_speed = 0;
            /*
            var SND;
            {
                SND = audio_play_sound(aDemonCharge, 0, 0)
                audio_sound_gain(SND, 1, 0)
            }
            */
            nState = false;
        }
        image_speed = 0.1;
    }
    else if ( state == charging2 )
    {
        if ( nState == true )
        {
            sprite_index = sGhastBigChargeFinish;
            image_speed = 0;
            /*
            var SND;
            {
                SND = audio_play_sound(aDemonCharge, 0, 0)
                audio_sound_gain(SND, 1, 0)
            }
            */
            nState = false;
        }
        image_speed = 0.1;
    }
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sGhastBigChargeStart )
{
    instance_create(x+image_xscale * 3, y, oGhastBigShot)
    state = charging2;
    nState = true;
}
if ( sprite_index == sGhastBigChargeStart )
{
    state = idle;;
    nState = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index != -1)
{
    draw_self();
}
/*
draw_set_font(sFont);
draw_set_halign(true);
draw_text(x+60,y-30,"State: "+string(state));
//draw_text(x-10, y-84,"facing: "+string(facing));
draw_set_halign(false);
draw_set_color(c_purple);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
