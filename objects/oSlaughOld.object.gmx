<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSlaughIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy2</parentName>
  <maskName>sSlaughMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stuff
event_inherited();
canMove = true;
contactDamage = 1;
hpMax = 1;
hp = hpMax;
h = 0;
v = 0;
spd = 0.5;
Fric = 2;
Accel = 1;
dir = 1;
dir = image_xscale;
deathSeq = sSlaughDie;
oName = "Slaugh";

hSight = 28;
vSight = 16;
foundHim = false;
isAttacking = false;

idle         = "idle";
walking      = "walking";
attacking1   = "attacking1";
attacking2   = "attacking2";

state = idle;
nState = true;

cooldownTimer = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Effect
if (frozen == false)
{
    var ID;
    ID = instance_create(xprevious,yprevious,oEnemyDeath);
    ID.oName = oName;
    ID.sprite_index = deathSeq;
    ID.image_xscale=image_xscale;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life Check
if (hp &lt;= 0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision OLD
/*
// Actual collision checks + movement
if (frozen == false){
var i;

// Vertical
for (i = 0; i &lt; abs(v); ++i) {
    if (!place_meeting(x, y + sign(v), oParSolid))
        y += sign(v);
    else {
        v = 0;
        break;
    }
}

// Horizontal
for (i = 0; i &lt; abs(h); ++i) {
    // UP slope
    if (place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y - 1, oParSolid))
        --y;
    
    // DOWN slope
    if (!place_meeting(x + sign(h), y, oParSolid) &amp;&amp; !place_meeting(x + sign(h), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(h), y + 2, oParSolid))
        ++y;      
        
    if (!place_meeting(x + sign(h), y, oParSolid))
        x += sign(h); 
    else {
        // Push block
        if (place_meeting(x + sign(h), y, oPushBlock)) {
            with (instance_place(x + sign(h), y, oPushBlock))
                h = other.h
        } else
            h = 0;
        break;
    }
}
}
///////////////////////////////////////////////////////////////////////////////

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oSlaughOld</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///System
if (frozen == false)
{
    sightRadius()
    if ( foundHim == true )
    {
        if ( isAttacking == false )
        {
            //var attackID;
            
            //attackID = instance_create(x, y, oParEnDamage);
            //attackID.creatorID = id;
                //attackID.attackType = "Melee";
            //attackID.oName = "Slaugh";
            //attackID.image_xscale = image_xscale;
            //attackID.contactDamage = contactDamage;
            state = attacking1;
            nState = true;
        }
    }
    if ( state == idle )
    {
        if (nState == true)
        {
            vx = 0;
            coolDownTimer = 0;
            sprite_index = sSlaughIdle;
            image_speed = 0.1;
            nState = false;
        }
        
        coolDownTimer += 1;
        if ( coolDownTimer == 120 )
        {
            state = walking;
            nState = true;
            coolDownTimer = 0;
        }
    }
    else if ( state == walking )
    {
        if ( nState == true )
        {
            sprite_index = sSlaughWalk;
            image_speed = 0.10;
            nState = false;
        }
        
        if (!place_meeting( x+image_xscale, y-3, oParSolid)
        &amp;&amp; !place_meeting( x+image_xscale, y-3, oEnBlocker) )
        {
            vx = image_xscale * spd;
            x += vx;
        }
        else
        {
            vx = 0;
        }
    
               
        if (vx == 0)
        {
            if (place_meeting(x+1,y,oParSolid) &amp;&amp; place_meeting(x-1,y,oParSolid))
            {
                image_index=1;
                image_speed=0;
            }
            else
            {
                image_xscale = -image_xscale;
            }
        }
    }
    else if ( state == attacking1 )
    {
        if ( nState == true )
        {
            if ( instance_exists(oPlayer) )
            {
                if ( oPlayer.x &gt; x )
                {
                    image_xscale = 1;
                }
                else
                {
                    image_xscale = -1;
                }
            }
            vx = 0;
            sprite_index = sSlaughAttack1;
            image_index = 0;
            image_speed = 0.33;
            contactDamage = 1;
            isAttacking = true;
            nState = false;
        }
    }
    else if ( state == attacking2 )
    {
        if ( nState == true )
        {
            if ( instance_exists(oPlayer) )
            {
                if ( oPlayer.x &gt; x )
                {
                    image_xscale = 1;
                }
                else
                {
                    image_xscale = -1;
                }
            }
            vx = 0;
            sprite_index = sSlaughAttack2;
            image_index = 0;
            image_speed = 0.33;
            contactDamage = 1;
            nState = false;
        }
    }
}
else
image_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( sprite_index == sSlaughAttack1 )
{
    contactDamage = 1;
    state = attacking2;
    mask_index = sSlaughAttackMask;
    nState = true;
}
if ( sprite_index == sSlaughAttack2 )
{
    contactDamage = 1;
    state = idle;
    mask_index = sSlaughMask;
    isAttacking = false;
    nState = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
